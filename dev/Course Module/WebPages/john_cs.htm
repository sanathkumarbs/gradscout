<!doctype html>
<html xml:lang="en" lang="en" dir="ltr">

<head>
<title>Computer Science &lt; John Hopkins University</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="keywords" content="computer science, degree, courses, program, undergraduate, graduate, faculty, technology" />
<link rel="search" type="application/opensearchdescription+xml"
			href="/search/opensearch.xml" title="Catalog" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0" />
<link href="/favicon.ico" rel="shortcut icon" />
<link rel="stylesheet" type="text/css" href="/css/reset.css" />
<link rel="stylesheet" type="text/css" href="/fonts/font-awesome/font-awesome.min.css" />
<link rel="stylesheet" type="text/css" href="/css/screen.css?v=2" media="screen" />
<link rel="stylesheet" type="text/css" href="/css/custom.css" media="screen" />
<link rel="stylesheet" type="text/css" href="/css/print.css" media="print" />
<script type="text/javascript" src="/js/jquery.js"></script>
<script type="text/javascript" src="/js/lfjs.js"></script>
<script type="text/javascript" src="/js/lfjs_any.js"></script>
<link rel="stylesheet" type="text/css" href="/js/lfjs.css" />
<script type="text/javascript" src="/js/courseleaf.js"></script>
<script type="text/javascript" src="/js/custom.js"></script>

</head>



<body>





<!--htdig_noindex-->
<div class="accessible noscript">
	<div class="accessible-menu">
		<ul>
			<li><a href="#content" rel="section">Skip to Content</a></li>
			<li><a href="/azindex/">AZ Index</a></li>
			<li><a href="/">Catalog Home</a></li>
			<li><a href="/">Institution Home</a></li>
		</ul>
	</div>
</div>
<!--/htdig_noindex-->

<!--htdig_noindex-->
<header id="header" role="banner" class="clearfix">
	<div id="logo">
		<a href="https://jhu.edu">
			<img src="/images/logo.png" alt="Johns Hopkins University" />
		</a>
	</div><!-- end #logo -->
	<div id="header-title">
		<a class="title-main" href="#">
			Undergraduate &amp; Graduate Academic Catalog
		</a>
		<br/>
		<a class="title-sub" href="#">
			2016-17 Edition
		</a>
	</div>
</header> <!-- end header -->
<!--/htdig_noindex-->

<!--htdig_noindex-->
<nav id="navigation" role="navigation" aria-label="secondary navigation">
	<div id="search" role="search">
		<form id="cl-search" action="/search/" class="clearfix">
			<a href="#" onclick="toggleSearch(); return false;" class="search-toggle"><span class="sr-only">Search</span></a>
			<label for="name" class="sr-only">Search Catalog</label>
			<input type="text" name="search" size="25" placeholder="Search catalog" class="searchbox" id="name" title="Search Catalog">
			<span class="menu-search-select">
				<span class="cat-radio">
					<input type="radio" id="catsearch" name="check" checked="checked" onclick="ModifySearch1()">
					<label for="catsearch" style="display: inline;">
					<span><span></span></span><em>Search </em>Catalog
					</label>
				</span>
				<span class="jhu-radio">
					<input type="radio" id="jhusearch" name="check" onclick="ModifySearch2()">
					<label for="jhusearch" style="display: inline;">
					<span><span></span></span><em>Search </em>JHU
					</label>
				</span>
			</span>
		</form>
	</div><!-- end #search -->
</nav> <!-- end navigation -->
<!--/htdig_noindex-->


<!--htdig_noindex-->
<div id="breadcrumb" role="navigation">
	<div class="wrap clearfix">
<ul><li><a href="/">Home</a><span class="crumbsep"></span></li><li><a href="/departments-program-requirements-and-courses/">Departments,&nbsp;Program&nbsp;Requirements,&nbsp;and&nbsp;Courses</a><span class="crumbsep"></span></li><li><a href="/departments-program-requirements-and-courses/engineering/">Whiting&nbsp;School&nbsp;of&nbsp;Engineering</a><span class="crumbsep"></span></li><li><span class="active">Computer Science</span></li></ul>
		<a href="#print-dialog" id="print-btn" onclick="showPrintDialog(); return false;">Print Options</a>
	</div>
</div>
<!--/htdig_noindex-->

<div id="content-wrapper" class="wrap clearfix">

	<div id="left-col">
		<div id="sidebar">
			<a id="sidebar-nav-mobile">In this section...</a>
			<!-- Begin Regular Nav -->
			<div id="cl-menu" role="navigation" aria-label="primary navigation">
<ul class="nav levelone" id="/">
	<li><a href="/degree-programs/">Degree Programs</a></li>
	<li class="isparent"><a href="/undergrad-students/">Undergraduate Students</a></li>
	<li class="isparent"><a href="/grad-students/">Graduate Students</a></li>
	<li class="active isparent"><a href="/departments-program-requirements-and-courses/">Departments, Program Requirements, and Courses</a>
	<ul class="nav leveltwo" id="/departments-program-requirements-and-courses/">
		<li class="isparent"><a href="/departments-program-requirements-and-courses/arts-sciences/">Zanvyl Krieger School of Arts and Sciences</a></li>
		<li class="active isparent"><a href="/departments-program-requirements-and-courses/engineering/">Whiting School of Engineering</a>
		<ul class="nav levelthree" id="/departments-program-requirements-and-courses/engineering/">
			<li><a href="/departments-program-requirements-and-courses/engineering/applied-mathematics-statistics/">Applied Mathematics and Statistics</a></li>
			<li><a href="/departments-program-requirements-and-courses/engineering/biomedical-engineering/">Biomedical Engineering</a></li>
			<li class="isparent"><a href="/departments-program-requirements-and-courses/engineering/leadership-education/">Center for Leadership Education</a></li>
			<li><a href="/departments-program-requirements-and-courses/engineering/chemical-biomolecular-engineering/">Chemical and Biomolecular Engineering</a></li>
			<li><a href="/departments-program-requirements-and-courses/engineering/civil-engineering/">Civil Engineering</a></li>
			<li><a href="/departments-program-requirements-and-courses/engineering/computational-medicine/">Computational Medicine</a></li>
			<li class="active self"><a href="#" onclick="return false;">Computer Science</a></li>
			<li><a href="/departments-program-requirements-and-courses/engineering/electrical-computer-engineering/">Electrical and Computer Engineering</a></li>
			<li><a href="/departments-program-requirements-and-courses/engineering/general-engineering/">General Engineering</a></li>
			<li><a href="/departments-program-requirements-and-courses/engineering/geography-environmental-engineering/">Geography and Environmental Engineering</a></li>
			<li><a href="/departments-program-requirements-and-courses/engineering/information-security-institute/">Information Security Institute</a></li>
			<li><a href="/departments-program-requirements-and-courses/engineering/materials-science-engineering/">Materials Science and Engineering</a></li>
			<li><a href="/departments-program-requirements-and-courses/engineering/mechanical-engineering/">Mechanical Engineering</a></li>
			<li><a href="/departments-program-requirements-and-courses/engineering/nanobio-technology/">NanoBio Technology</a></li>
			<li><a href="/departments-program-requirements-and-courses/engineering/robotics-computational-sensing/">Robotics and Computational Sensing</a></li>
		</ul>
		</li>
		<li class="isparent"><a href="/departments-program-requirements-and-courses/multi-school-programs/">Multi-&#8203;School Programs of Study</a></li>
	</ul>
	</li>
	<li><a href="/faculty-listings/">Faculty Listings</a></li>
	<li><a href="/archive/">Catalog Archives</a></li>
</ul>
			</div> <!-- end nav -->
		</div>
	</div>

	<div id="right-col">
		<div id="content" role="main">
			<h1 class="page-title">Computer Science</h1>



<script type="text/javascript">
//<![CDATA[
	var defshow = "text";
	var bodycontainer = "#body";
	var validhashes = ",text,undergraduatetext,graduatetext,faculty,";

if(window.location.hash.length) {
	var hash = cleanHash(window.location.hash);
	if(validhashes.indexOf("," + hash + ",") != -1)
		defshow = hash;	
}
var ss = document.styleSheets;
var workss = null;
for(var i=0; i < ss.length; i++) {
	var currmedia = "";
	if (typeof ss[i].media == "string") 
		currmedia = ss[i].media
	else if (typeof ss[i].media == "object" && ss[i].media.mediaText) 
		currmedia = ss[i].media.mediaText;
	
	if((currmedia == "screen" || currmedia == "all") && (ss[i].href.indexOf("/") == 0 || ss[i].href.indexOf(document.location.host) >= 0)) {
		workss = ss[i];
		break;	
	}
}
if(workss && workss.insertRule) {
	workss.insertRule(".tab_content { display: none; }", workss.cssRules.length)
	workss.insertRule(".sectionheader { display: none; }", workss.cssRules.length)
	workss.insertRule("#" + defshow + "container { display: block; }", workss.cssRules.length)
} else if(workss && workss.addRule) {
	workss.addRule(".tab_content", "display: none");
	workss.addRule(".sectionheader", "display: none");
	workss.addRule("#" + defshow + "container", "display: block");
}
else {
	if (window.console)
		window.console.log('screen.css <link> needs attribute media="screen"');
}
//]]>
</script>
	<div id="tabs">
		<ul class="clearfix" role="tablist">
			<li id="texttab" role="presentation">
<a href="#textcontainer" role="tab" aria-controls="textcontainer" onclick="return showSection('text');">Overview</a></li>
			<li id="facultytab" role="presentation">
<a href="#facultycontainer" role="tab" aria-controls="facultycontainer" onclick="return showSection('faculty');">Faculty</a></li>
			<li id="undergraduatetexttab" role="presentation">
<a href="#undergraduatetextcontainer" role="tab" aria-controls="undergraduatetextcontainer" onclick="return showSection('undergraduatetext');" >Undergraduate</a></li>
			<li id="graduatetexttab" role="presentation">
<a href="#graduatetextcontainer" role="tab" aria-controls="graduatetextcontainer" onclick="return showSection('graduatetext');" >Graduate</a></li>
			<li id="courseinventorytab"><a href="#courseinventory" onclick="return showSection('courseinventory');">Courses</a></li>
		</ul>
	</div>

<div id="textcontainer" class="tab_content" role="tabpanel">

<p><a href="http://cs.jhu.edu/" target="_blank">http://cs.jhu.edu/</a></p><p class="Head1">Computing has grown to be a pervasive element of science, business, society, and entertainment. The availability of relatively inexpensive high performance computing capabilities, ubiquitous high speed and wireless networking, and mobile computing have powered a technology-driven restructuring of the way society and most professions now operate. Information, and its associated processing and transport, is the commodity upon which corporations are built and lives are improved. At the center of this revolution, making it happen, are those who study computer science.</p>
<p class="BodyText1"><span>There are two dimensions to the field of computer science that establish it as a unique area. CS can be viewed as a stand-alone discipline worthy of study unto itself, and/or as an empowering discipline to be studied in conjunction with other areas. Core CS careers include (but are not limited to) software design and development, computer systems engineering or administration, and information security. Application areas span a wide range of fields and disciplines such as robotics, medical or health informatics, gaming/entertainment, business computing, and scientific research to name a few.</span></p>
<p class="BodyText1">Because computer science is a highly diverse and broadly applied field, studies can proceed in many different directions. Accordingly, the undergraduate and graduate programs in the Department of Computer Science at Johns Hopkins are flexible curricula designed to accommodate a wide range of goals. A student at Johns Hopkins can pursue appropriately customized versions of the following computer science programs: minor, bachelor of science, bachelor of arts, masters of science in engineering, and doctor of philosophy. Most of this catalog section is devoted to details regarding these programs.</p>
<p class="BodyText1">Computer science research laboratories are currently active in the following areas at Hopkins: algorithm design and analysis, human-computer interaction, machine learning, health informatics, computational medicine, computer vision and image processing, computer graphics, geometric modeling, programming languages, natural language and speech processing, information retrieval, cryptography and information security, secure and robust systems, storage systems, high-performance and scientific computing, computational genomics, networks and distributed systems, stream processing, parallel and distributed databases, robotics, computer-integrated surgical systems, and wireless and sensor systems.</p>
<p class="BodyText1">Additionally, interdisciplinary research centers in the university have heavy involvement by Computer Science faculty: the Information Security Institute (ISI), the Center for Computer-Integrated Surgical Systems and Technology (CISST), the Laboratory for Computational Sensing and Robotics (LCSR), the Center for Language and Speech Processing (CLSP), the Institute for Data Intensive Engineering and Science (IDIES), and the Malone Center for Engineering in Healthcare (MCEH). An important component of the educational process in the department is the opportunity for undergraduate and graduate student participation in the research programs of the faculty. In particular, original research in close association with individual faculty members is emphasized at the graduate level.</p>
<p class="BodyText1">There are several closely related programs at the undergraduate and graduate levels which involve significant coursework and faculty involvement from the Department of Computer Science. The Laboratory for Computational Sensing and Robotics (LCSR) offers a minor in robotics and also a minor in computer integrated surgery through the Engineering Research Center for Computer Integrated Surgical Systems and Technology. Details of these programs may be found elsewhere in this catalog in the section pertaining to the <a href="/departments-program-requirements-and-courses/engineering/robotics-computational-sensing/">Laboratory for Computational Sensing and Robotics</a>. Undergraduates with a strong interest in system design and performance may elect to pursue a bachelor degree in <a href="/departments-program-requirements-and-courses/engineering/electrical-computer-engineering/">computer engineering</a>. This field of study includes course work in computer science, as well as electrical and computer engineering. Although jointly administered by both departments, specific goals and requirements of the computer engineering degree may be found in the catalog section pertaining to the Department of Electrical and Computer Engineering only.</p>
<p class="BodyText1">At the graduate level, the <a href="/departments-program-requirements-and-courses/engineering/robotics-computational-sensing/">LCSR</a> offers a Master of Science in Engineering (M.S.E.) in Robotics, designed for students from a wide variety of engineering, scientific, and mathematical backgrounds to advance their interdisciplinary knowledge in robotics. Details of this program may be found in the LCSR section of this catalog, or on the web at <a href="http://www.lcsr.jhu.edu/MSE" target="_blank">www.lcsr.jhu.edu/MSE</a>. Lastly, the Master of Science in Security Informatics (M.S.S.I.) is a specialized graduate program offered through the <a href="/departments-program-requirements-and-courses/engineering/information-security-institute/">Information Security Institute</a> (ISI) in the WSE. The field of security informatics is fundamentally based on information security and assurance technologies (hardware, software, and networks) as related to issues such as policy, management, privacy/trust, health care, and law, from both national and international perspectives. Interested students can obtain detailed information regarding the M.S.S.I. online at <a href="http://www.jhuisi.jhu.edu/" target="_blank"><span>www.jhuisi.jhu.edu</span></a> or in the ISI section of this catalog.</p>
<p class="BodyText1">For additional information regarding the academic programs available in Computer Science, and the facilities provided, please consult the sections which follow, or the departmental website <a href="http://www.cs.jhu.edu" target="_blank"><span>www.cs.jhu.edu</span></a>.</p>
<h2>Facilities</h2>
<p>The CS department is primarily housed in Malone Hall, a state of the art, open concept research facility.  Additional department research space is located in the adjacent Hackerman Hall. </p>
<p>The general department computing facilities include numerous workstations and servers.  Undergraduate laboratories combine to provide approximately 24 Linux workstations, and several Windows stations.  One of these labs is a collaboration room allowing students to work in a team-based environment, with several private breakout rooms as well.  At the graduate level there is a Master's Lab consisting of a collaboration area and workstation area, both consisting of several Linux workstations.  All Ph.D. students are assigned dedicated desks in their research labs. Additionally, multiple high-speed networked laser printers, as well as a networked color copier and remotely accessible Linux compute servers are available to both graduate and undergraduate students.</p>
<p class="BodyText1">Focused research laboratories have significant resources that provide greater specialization, including isolated networks of PCs for security studies, high-performance computing clusters, sensor and wireless computing testbeds, robots and computer vision systems, a mock operating room equipped with medical robots and imaging equipment, and more.</p>
<p class="BodyText1">The general department computing facilities are tied together by our own LAN, and access to specialized hardware in other departments, labs, and institutions is available via the university intranet and the Internet. In addition, the university provides wireless access to the JHU intranet and the Internet, as well as server systems that provide e-mail accounts for all students.</p>
<p class="backtotop"><a href="#top">Back to top</a></p></div><!--end #textcontainer -->

			<div id="undergraduatetextcontainer" class="tab_content" role="tabpanel">
				<a name="undergraduatetext"></a><p>(See also <a href="/undergrad-students/academic-policies/requirements-for-a-bachelors-degree/">General Requirements for Departmental Majors</a>)</p>
<p class="firstpara">The objectives of our bachelor degree programs are to train computer scientists who will be able to:</p>
<ul>
	<li>Successfully engage in professional practice in the computing sciences or apply computer science tools and techniques to another field of interest.</li>
	<li>Pursue advanced study in the computing sciences.</li>
	<li>Behave in a professional and ethical manner.</li>
	<li>Lead teams and provide vision for innovation.</li>
	<li>Work successfully in both independent and team environments.</li>
</ul>
<p class="firstpara">A successful major program of study leads to either the Bachelor of Science in Computer Science (B.S.) or the Bachelor of Arts in Computer Science (B.A.). Students should decide which degree program to complete by about their junior year. Both degree programs require specific courses and/or credits in several key areas: computer science, math, basic science, humanities and social sciences. However, there is much flexibility in how these requirements are fulfilled. Undergraduate majors may choose to pursue a broad selection of computer science and distributional courses, or to pursue a particular focus area within the field. Current foci primarily reflect departmental and school research strengths: big data, computational biology, fundamentals of computing, information security, natural language processing, robotics, systems and networking; while a few are directed towards career paths: business computing, software engineering, and video game design. Further information on these focus areas may be found in the computer science <a href="http://www.cs.jhu.edu/undergraduate-studies/academics/ugrad-advising-manual/">undergraduate advising manual</a>.</p>
<p class="firstpara">All undergraduate students majoring or minoring in computer science must have a faculty advisor in the department. They will be assigned an advisor as entering freshmen or upon deciding on the major/minor. Every major must follow a program approved by his/her faculty advisor.</p>
<p class="firstpara">The department also offers a minor in computer science, and tangentially, a minor in computer integrated surgery and a minor in robotics. Some students majoring in computer science may be eligible for a combined bachelor’s/master’s degree program. Requirements for these programs are included here as well. Additional details regarding undergraduate programs can be found in the department’s <a href="http://www.cs.jhu.edu/undergraduate-studies/academics/ugrad-advising-manual/">undergraduate advising manual</a> or on the website at <a href="http://www.cs.jhu.edu" target="_blank"><strong><span>www.cs.jhu.edu</span></strong></a>.</p>
<h2>Requirements for the B.S. Degree</h2>
<p class="firstpara">The Bachelor of Science in Computer Science degree program is accredited by the Computing Accreditation Commission of ABET, <a href="http://www.abet.org" target="_blank">www.abet.org</a>. It provides for the acquisition of the following knowledge base and skill set:</p>
<ul>
	<li>An ability to apply knowledge of computing and mathematics appropriate to the discipline.</li>
	<li>An ability to analyze a problem, and identify and define the computing requirements appropriate to its solution.</li>
	<li>An ability to design, implement, and evaluate a computer-based system, process, component, or program to meet desired needs.</li>
	<li>An ability to function effectively on teams to accomplish a common goal.</li>
	<li>An understanding of professional, ethical, legal, security, and social issues and responsibilities.</li>
	<li>An ability to communicate effectively with a range of audiences.</li>
	<li>An ability to analyze the local and global impact of computing on individuals, organizations, and society.</li>
	<li>Recognition of the need for and an ability to engage in continuing professional development.</li>
	<li>An ability to use current techniques, skills, and tools necessary for computing practice.</li>
	<li>An ability to apply mathematical foundations, algorithmic principles, and computer science theory in the modeling and design of computer-based systems in a way that demonstrates comprehension of the trade-offs involved in design choices.</li>
	<li>An ability to apply design and development principles in the construction of software systems of varying complexity.</li>
</ul>
<p class="firstpara">To meet the course credit requirements for the B.S. in computer science, the student must complete a minimum of 126 credits.  The basic requirements for the B.S. degree are as follows:</p>
<table class="sc_courselist" width="100%"><tbody><tr class="even firstrow"><td colspan="2"><span class="courselistcomment">Computer Science</span></td><td class="hourscol">42</td></tr>
<tr class="odd"><td colspan="2"><span class="courselistcomment">Mathematics</span></td><td class="hourscol">24</td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">Basic Sciences</span></td><td class="hourscol">16</td></tr>
<tr class="odd"><td colspan="2"><span class="courselistcomment">Humanities/Social Sciences</span></td><td class="hourscol">18</td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">Two Writing Intensive Courses</span></td><td class="hourscol"></td></tr>
<tr class="odd lastrow"><td colspan="2"><span class="courselistcomment">Electives</span></td><td class="hourscol">26</td></tr>
<tr class="listsum"><td colspan="2">Total Credits</td><td class="hourscol">126</td></tr></tbody></table>

<p class="BodyText1"><br/>
Details and course recommendations for these distributional requirements are below. These requirements add up to 100 credits and fulfill general university and WSE requirements, leaving 26 pure elective credits. Except for electives, courses should not be taken on a satisfactory/unsatisfactory basis. By university policy, no more than 18 D or D+ credits can be counted toward the total credit requirements for a degree.</p>
<table class="sc_courselist" width="100%"><colgroup><col class="codecol"/><col class="titlecol"/><col align="char" char="." class="hourscol"/></colgroup><tbody><tr class="even areaheader firstrow"><td colspan="2"><span class="courselistcomment areaheader">Computer Science (42 credits)</span> <sup>*</sup></td><td class="hourscol"></td></tr>
<tr class="odd"><td colspan="2"><span class="courselistcomment">The following foundational courses in computer science must be included in a student's program:</span></td><td class="hourscol"></td></tr>
<tr class="even"><td class="codecol"><a href="/search/?P=EN.600.104" title="EN.600.104" class="bubblelink code" onclick="return showCourse(this, 'EN.600.104');">EN.600.104</a></td><td>Computer Ethics</td><td class="hourscol">1</td></tr>
<tr class="odd"><td class="codecol"><a href="/search/?P=EN.600.107" title="EN.600.107" class="bubblelink code" onclick="return showCourse(this, 'EN.600.107');">EN.600.107</a></td><td>Introductory Programming in Java (or equivalent)</td><td class="hourscol">3</td></tr>
<tr class="even"><td class="codecol"><a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a></td><td>Intermediate Programming</td><td class="hourscol">4</td></tr>
<tr class="odd"><td class="codecol"><a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></td><td>Data Structures</td><td class="hourscol">4</td></tr>
<tr class="even"><td class="codecol"><a href="/search/?P=EN.600.233" title="EN.600.233" class="bubblelink code" onclick="return showCourse(this, 'EN.600.233');">EN.600.233</a></td><td>Computer System Fundamentals</td><td class="hourscol">3</td></tr>
<tr class="odd"><td class="codecol"><a href="/search/?P=EN.600.271" title="EN.600.271" class="bubblelink code" onclick="return showCourse(this, 'EN.600.271');">EN.600.271</a></td><td>Automata &amp; Computation Theory</td><td class="hourscol">3</td></tr>
<tr class="even"><td class="codecol"><a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a></td><td>Introduction To Algorithms</td><td class="hourscol">3</td></tr>
<tr class="orclass even"><td class="codecol orclass">or <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a></td><td colspan="2"> Algorithms I</td></tr>
<tr class="odd"><td colspan="2"><span class="courselistcomment">At least 16 credit hours must be at the 300-level or above, including <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a>/463. At least one course in each classification area of Analysis, Applications and Systems must be chosen. An exhaustive list of the area classifications for each of our courses may be found on the department’s website. </span></td><td class="hourscol">13</td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">Students must take at least one of the following courses which contain oral communication components. The course satisfying this requirement may overlap other requirements:</span></td><td class="hourscol"></td></tr>
<tr class="odd"><td class="codecol"><div style="margin-left: 20px;"><a href="/search/?P=EN.600.250" title="EN.600.250" class="bubblelink code" onclick="return showCourse(this, 'EN.600.250');">EN.600.250</a></div></td><td>User Interfaces and Mobile Applications</td><td class="hourscol"></td></tr>
<tr class="even"><td class="codecol"><div style="margin-left: 20px;"><a href="/search/?P=EN.600.255" title="EN.600.255" class="bubblelink code" onclick="return showCourse(this, 'EN.600.255');">EN.600.255</a></div></td><td>Introduction to Video Game Design</td><td class="hourscol"></td></tr>
<tr class="odd"><td class="codecol"><div style="margin-left: 20px;"><a href="/search/?P=EN.600.321" title="EN.600.321/421" class="bubblelink code" onclick="return showCourse(this, 'EN.600.321');">EN.600.321/421</a></div></td><td>Object Oriented Software Engineering</td><td class="hourscol"></td></tr>
<tr class="even"><td class="codecol"><div style="margin-left: 20px;"><a href="/search/?P=EN.600.355" title="EN.600.355" class="bubblelink code" onclick="return showCourse(this, 'EN.600.355');">EN.600.355</a></div></td><td>Video Game Design Project</td><td class="hourscol"></td></tr>
<tr class="odd"><td class="codecol"><div style="margin-left: 20px;"><a href="/search/?P=EN.600.411" title="EN.600.411" class="bubblelink code" onclick="return showCourse(this, 'EN.600.411');">EN.600.411</a></div></td><td>Computer Science Innovation &amp; Entrepreneurship II</td><td class="hourscol"></td></tr>
<tr class="even"><td class="codecol"><div style="margin-left: 20px;"><a href="/search/?P=EN.600.446" title="EN.600.446" class="bubblelink code" onclick="return showCourse(this, 'EN.600.446');">EN.600.446</a></div></td><td>Computer Integrated Surgery II</td><td class="hourscol"></td></tr>
<tr class="odd"><td class="codecol"><div style="margin-left: 20px;"><a href="/search/?P=EN.600.520" title="EN.600.520" class="bubblelink code" onclick="return showCourse(this, 'EN.600.520');">EN.600.520</a></div></td><td>Senior Honors Thesis</td><td class="hourscol"></td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">Eight additonal credits of Computer Science are required. </span> <sup>**</sup></td><td class="hourscol">8</td></tr>
<tr class="odd areaheader"><td colspan="2"><span class="courselistcomment areaheader">Mathematics (24 credits)</span></td><td class="hourscol"></td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">The following courses must be included:</span></td><td class="hourscol"></td></tr>
<tr class="odd"><td class="codecol"><a href="/search/?P=AS.110.108" title="AS.110.108" class="bubblelink code" onclick="return showCourse(this, 'AS.110.108');">AS.110.108</a></td><td>Calculus I</td><td class="hourscol">4</td></tr>
<tr class="even"><td class="codecol"><a href="/search/?P=AS.110.109" title="AS.110.109" class="bubblelink code" onclick="return showCourse(this, 'AS.110.109');">AS.110.109</a></td><td>Calculus II (For Physical Sciences and Engineering)</td><td class="hourscol">4</td></tr>
<tr class="odd"><td class="codecol"><a href="/search/?P=EN.550.171" title="EN.550.171" class="bubblelink code" onclick="return showCourse(this, 'EN.550.171');">EN.550.171</a></td><td>Discrete Mathematics</td><td class="hourscol">4</td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">The remaining courses must be 200-level or above, chosen from Mathematics (110.xxx) or Applied Math and Statistics (550.xxx), and must include coverage of both probability and statistics. Some highly recommended math electives are Probability &amp; Statistics, Linear Algebra, Calculus III, and Differential Equations. Note that students will need at least six courses to fulfill the credit requirement. </span> <sup>***</sup></td><td class="hourscol">12</td></tr>
<tr class="odd areaheader"><td colspan="2"><span class="courselistcomment areaheader">Basic Sciences (16 credits)</span></td><td class="hourscol"></td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">At least two semesters of physics or two semesters of chemistry, with the associated laboratories, must be included. The remaining courses must be chosen in accordance with the list posted on the department’s website, which includes most courses in Physics, Chemistry, Biology, Biophysics, Earth &amp; Planetary Sciences, Natural Sciences designated engineering courses, and some Natural Sciences designated courses in Neuroscience &amp; Cognitive Science, but not all. At most 2 credits from satisfactory/unsatisfactory intersession courses may be used to fulfill this requirement.</span></td><td class="hourscol">16</td></tr>
<tr class="odd areaheader"><td colspan="2"><span class="courselistcomment areaheader">Humanities/Social Sciences (18 credits)</span></td><td class="hourscol"></td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">Six courses in the Humanities and Social and Behavioral Sciences must be taken, with each course at least 3 credits. These courses must have either an Humanities or Social and Behavioral Sciences area designator on them; however, foreign language courses (without an Humanities or Social and Behavioral Sciences) may also be used to satisfy this requirement.</span></td><td class="hourscol">18</td></tr>
<tr class="odd areaheader"><td colspan="2"><span class="courselistcomment areaheader">Writing Requirement</span></td><td class="hourscol"></td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">Students are required to fulfill the university’s requirement of two writing intensive courses, each at least 3 credits. Students must receive at least a C- grade or better in these writing courses. At least one course must be explicitly focused on writing skills (eg, Expository Writing, Professional Communication, Fiction &amp; Poetry). These courses may overlap other requirements. </span></td><td class="hourscol"></td></tr>
<tr class="odd areaheader"><td colspan="2"><span class="courselistcomment areaheader">Electives</span></td><td class="hourscol"></td></tr>
<tr class="even lastrow"><td colspan="2"><span class="courselistcomment">Electives are to be chosen by the student with guidance and approval of his/her advisor.</span></td><td class="hourscol">26</td></tr>
<tr class="listsum"><td colspan="2">Total Credits</td><td class="hourscol">126</td></tr></tbody></table>

<table border="0" width="100%" class="sc_footnotes"><tr><td valign="top" class="symcol">*</td><td class="notecol"><p>No more than 6 independent type credits (courses numbered 600.5xx) and no more than 3 credits of short courses (1-credit special topics courses) can be counted toward this requirement. <span> However, B.S. students doing the Senior Honors Thesis (<span class="sc_courseinline"><a href="/search/?P=EN.600.519" title="EN.600.519" class="bubblelink code" onclick="return showCourse(this, 'EN.600.519');">EN.600.519</a></span>-<span class="sc_courseinline"><a href="/search/?P=EN.600.520" title="EN.600.520" class="bubblelink code" onclick="return showCourse(this, 'EN.600.520');">EN.600.520</a></span>) may use an additional three credits of independent work toward their CS requirements, for a total of 9 credits.</span></p> <p>No courses with grades below C- or with satisfactory/unsatisfactory grades can be used to fulfill this requirement unless they are not offered for a grade.</p></td></tr><tr><td valign="top" class="symcol">**</td><td class="notecol"><p>Up to 6 of the 42 required credits may be from an approved list of relevant courses in other departments, which includes courses cross-listed in CS.  These courses may only count as &quot;CS other&quot; credits, not upper level CS credits (regardless of course level in the other department).  See department website for the list.</p></td></tr><tr><td valign="top" class="symcol">***</td><td class="notecol"><p>AP Statistics credits may not be used to satisfy these credit requirements; however, they do meet the need for coverage of statistics (not probability).</p></td></tr></table>
<h2>Requirements for the B.A. Degree</h2>
<p class="firstpara">To meet the course credit requirements for the B.A. in computer science, the student must complete a minimum of 120 credits. The basic requirements for the B.A. degree are:</p>
<table class="sc_courselist" width="100%"><tbody><tr class="even firstrow"><td colspan="2"><span class="courselistcomment">Computer Science</span></td><td class="hourscol">32</td></tr>
<tr class="odd"><td colspan="2"><span class="courselistcomment">Mathematics</span></td><td class="hourscol">20</td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">Basic Sciences</span></td><td class="hourscol">12</td></tr>
<tr class="odd"><td colspan="2"><span class="courselistcomment">Humanities/Social Sciences</span></td><td class="hourscol">18</td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">Foreign Language</span></td><td class="hourscol">6</td></tr>
<tr class="odd"><td colspan="2"><span class="courselistcomment">4 Writing Intensive Courses</span></td><td class="hourscol"></td></tr>
<tr class="even lastrow"><td colspan="2"><span class="courselistcomment">Electives</span></td><td class="hourscol">32</td></tr>
<tr class="listsum"><td colspan="2">Total Credits</td><td class="hourscol">120</td></tr></tbody></table>

<p class="BodyText1">Details and course recommendations of these distributional requirements are below. These requirements add up to 88 credits and fulfill general university distribution requirements.  Except for electives, courses should not be taken on a satisfactory/unsatisfactory basis. By university policy, no more than 18 D or D+ credits can be counted toward the total credit requirements for a degree. </p>
<table class="sc_courselist" width="100%"><colgroup><col class="codecol"/><col class="titlecol"/><col align="char" char="." class="hourscol"/></colgroup><tbody><tr class="even areaheader firstrow"><td colspan="2"><span class="courselistcomment areaheader">Computer Science (32 credits)</span> <sup>*</sup></td><td class="hourscol"></td></tr>
<tr class="odd"><td colspan="2"><span class="courselistcomment">The following foundational courses in computer science must be included in a student’s program:</span></td><td class="hourscol"></td></tr>
<tr class="even"><td class="codecol"><a href="/search/?P=EN.600.107" title="EN.600.107" class="bubblelink code" onclick="return showCourse(this, 'EN.600.107');">EN.600.107</a></td><td>Introductory Programming in Java (or equivalent)</td><td class="hourscol">3</td></tr>
<tr class="odd"><td class="codecol"><a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a></td><td>Intermediate Programming</td><td class="hourscol">4</td></tr>
<tr class="even"><td class="codecol"><a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></td><td>Data Structures</td><td class="hourscol">4</td></tr>
<tr class="odd"><td class="codecol"><a href="/search/?P=EN.600.233" title="EN.600.233" class="bubblelink code" onclick="return showCourse(this, 'EN.600.233');">EN.600.233</a></td><td>Computer System Fundamentals</td><td class="hourscol">3</td></tr>
<tr class="even"><td class="codecol"><a href="/search/?P=EN.600.271" title="EN.600.271" class="bubblelink code" onclick="return showCourse(this, 'EN.600.271');">EN.600.271</a></td><td>Automata &amp; Computation Theory</td><td class="hourscol">3</td></tr>
<tr class="odd"><td class="codecol"><a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a></td><td>Introduction To Algorithms</td><td class="hourscol">3</td></tr>
<tr class="orclass odd"><td class="codecol orclass">or <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a></td><td colspan="2"> Algorithms I</td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">At least 15 credit hours must be at the 300-level or above, including <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a>/463.</span></td><td class="hourscol">12</td></tr>
<tr class="odd areaheader"><td colspan="2"><span class="courselistcomment areaheader">Mathematics (20 credits)</span></td><td class="hourscol"></td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">The following courses must be included:</span></td><td class="hourscol"></td></tr>
<tr class="odd"><td class="codecol"><a href="/search/?P=AS.110.108" title="AS.110.108" class="bubblelink code" onclick="return showCourse(this, 'AS.110.108');">AS.110.108</a></td><td>Calculus I</td><td class="hourscol">4</td></tr>
<tr class="even"><td class="codecol"><a href="/search/?P=AS.110.109" title="AS.110.109" class="bubblelink code" onclick="return showCourse(this, 'AS.110.109');">AS.110.109</a></td><td>Calculus II (For Physical Sciences and Engineering)</td><td class="hourscol">4</td></tr>
<tr class="odd"><td class="codecol"><a href="/search/?P=EN.550.171" title="EN.550.171" class="bubblelink code" onclick="return showCourse(this, 'EN.550.171');">EN.550.171</a></td><td>Discrete Mathematics</td><td class="hourscol">4</td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">The remaining courses may be chosen from Mathematics (110.xxx) or Applied Math and Statistics (550.xxx). At least one course must be 200-level or above.</span> <sup>**</sup></td><td class="hourscol">8</td></tr>
<tr class="odd areaheader"><td colspan="2"><span class="courselistcomment areaheader">Basic Sciences (12 credits)</span></td><td class="hourscol"></td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">At least two semesters of physics or chemistry or a combination of both, with the associated laboratories, must be included. The remaining courses must be chosen in accordance with the list posted on the department website, which includes most courses in Physics, Chemistry, Biology, Biophysics, Earth &amp; Planetary Sciences, ‘N’ designated engineering courses, and some ‘N’ designated courses in Neuroscience and Cognitive Science, but not all. At most 2 credits from (S/U) intersession courses may be used to fulfill this requirement.</span></td><td class="hourscol">12</td></tr>
<tr class="odd areaheader"><td colspan="2"><span class="courselistcomment areaheader">Humanities/Social Sciences (18 credits)</span></td><td class="hourscol"></td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">Six courses in the Humanities/Social Sciences must be taken, with each course at least 3 credits. At least two 3-credit courses at the 300-level or above are required. As befits a B.A. degree, students have ample flexibility to choose courses that broaden the scope of their study, in consultation with their advisors. A subset of the courses selected to satisfy this requirement should demonstrate coherence within an area. Any course with Humanities or Social Sciences area designators may fulfill these distributional requirements.</span></td><td class="hourscol">18</td></tr>
<tr class="odd areaheader"><td colspan="2"><span class="courselistcomment areaheader">Foreign Language (6 credits)</span></td><td class="hourscol"></td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">Two courses in a foreign language, with a total of at least 6 credits are required. These foreign language credits are in addition to the 18 required Humanities/Social Sciences credits.</span></td><td class="hourscol">6</td></tr>
<tr class="odd areaheader"><td colspan="2"><span class="courselistcomment areaheader">Writing Requirement</span></td><td class="hourscol"></td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">All primary computer science majors pursuing a B.A. degree are required to fulfill the university’s requirement of four writing intensive courses, each at least 3 credits. At least one course must be explicitly focused on writing skills (eg, Expository Writing, Professional Communication, Fiction &amp; Poetry). Students must receive at least a C- grade in these courses. These courses may overlap other requirement areas. </span></td><td class="hourscol"></td></tr>
<tr class="odd areaheader"><td colspan="2"><span class="courselistcomment areaheader">Electives</span></td><td class="hourscol"></td></tr>
<tr class="even lastrow"><td colspan="2"><span class="courselistcomment">Electives are to be chosen by the student with guidance and approval of his/her advisor.</span></td><td class="hourscol">32</td></tr>
<tr class="listsum"><td colspan="2">Total Credits</td><td class="hourscol">120</td></tr></tbody></table>

<table border="0" width="100%" class="sc_footnotes"><tr><td valign="top" class="symcol">*</td><td class="notecol"><p>No more than 3 independent type credits (courses numbered 600.5xx) and no more than 3 credits of short courses (1-credit special topics courses) can be counted toward this requirement. However, B.A. students doing the Senior Honors Thesis (<span class="sc_courseinline"><a href="/search/?P=EN.600.519" title="EN.600.519" class="bubblelink code" onclick="return showCourse(this, 'EN.600.519');">EN.600.519</a></span>-<span class="sc_courseinline"><a href="/search/?P=EN.600.520" title="EN.600.520" class="bubblelink code" onclick="return showCourse(this, 'EN.600.520');">EN.600.520</a></span>) may use an additional 3 credits of independent work toward their CS requirements, for a total of 6 credits.</p> <p>No courses with grades below C- or with satisfactory/unsatisfactory grades may be used to fulfill this requirement unless they are not offered for a grade.</p></td></tr><tr><td valign="top" class="symcol">**</td><td class="notecol"><p>Highly recommended: Probability/Statistics, Linear Algebra, Calculus III, Differential Equations. Note that students will need at least five courses to fulfill the credit requirement.</p></td></tr></table>
<h2>Minor in Computer Science</h2>
<p class="firstpara">To satisfy the course credit requirements for a minor in computer science, a student must take a minimum of seven courses, with a total of at least 23 credits, earning at least a C- in each course. These must include four core courses, to provide the student with a foundation, and three upper-level courses (300-level and above), to allow the student to pursue an advanced area in depth.</p>
<p>While not explicitly required, we also strongly recommend taking <span class="sc_courseinline"><a href="/search/?P=EN.550.171" title="EN.550.171" class="bubblelink code" onclick="return showCourse(this, 'EN.550.171');">EN.550.171</a> Discrete Mathematics</span> as preparation for several computer science courses, including <span class="sc_courseinline"><a href="/search/?P=EN.600.271" title="EN.600.271" class="bubblelink code" onclick="return showCourse(this, 'EN.600.271');">EN.600.271</a> Automata &amp; Computation Theory</span> and <span class="sc_courseinline"><a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a> Introduction To Algorithms</span>.</p>

<table class="sc_courselist" width="100%"><colgroup><col class="codecol"/><col class="titlecol"/><col align="char" char="." class="hourscol"/></colgroup><tbody><tr class="even areaheader firstrow"><td colspan="2"><span class="courselistcomment areaheader">Core Courses</span> <sup>*</sup></td><td class="hourscol"></td></tr>
<tr class="odd"><td class="codecol"><a href="/search/?P=EN.600.107" title="EN.600.107" class="bubblelink code" onclick="return showCourse(this, 'EN.600.107');">EN.600.107</a></td><td>Introductory Programming in Java (or AP credit)</td><td class="hourscol">3</td></tr>
<tr class="even"><td class="codecol"><a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a></td><td>Intermediate Programming</td><td class="hourscol">4</td></tr>
<tr class="odd"><td class="codecol"><a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></td><td>Data Structures</td><td class="hourscol">4</td></tr>
<tr class="even"><td colspan="2"><span class="courselistcomment">Choose one of the following:</span></td><td class="hourscol">3</td></tr>
<tr class="odd"><td class="codecol"><div style="margin-left: 20px;"><a href="/search/?P=EN.600.233" title="EN.600.233" class="bubblelink code" onclick="return showCourse(this, 'EN.600.233');">EN.600.233</a></div></td><td>Computer System Fundamentals</td><td class="hourscol"></td></tr>
<tr class="even"><td class="codecol"><div style="margin-left: 20px;"><a href="/search/?P=EN.600.271" title="EN.600.271" class="bubblelink code" onclick="return showCourse(this, 'EN.600.271');">EN.600.271</a></div></td><td>Automata &amp; Computation Theory</td><td class="hourscol"></td></tr>
<tr class="odd areaheader"><td colspan="2"><span class="courselistcomment areaheader">Upper-Level Courses</span></td><td class="hourscol"></td></tr>
<tr class="even lastrow"><td colspan="2"><span class="courselistcomment">Minors must take three CS courses at the 300-level or above. These courses should be chosen to form a cohesive minor and must be accepted by the computer science minor advisor.  It is strongly recommended that students choose all three courses from within one of the three research areas of analysis, applications, and systems. </span> <sup>**</sup></td><td class="hourscol">9</td></tr>
<tr class="listsum"><td colspan="2">Total Credits</td><td class="hourscol">23</td></tr></tbody></table>

<table border="0" width="100%" class="sc_footnotes"><tr><td valign="top" class="symcol">*</td><td class="notecol"><p>With the approval of a faculty member in the Department of Computer Science, serving as a computer science minor advisor, substitutions for these core courses are possible.</p></td></tr><tr><td valign="top" class="symcol">**</td><td class="notecol"><p>Each upper-level course description in this catalog includes its area for reference. In addition, a current listing of courses with area designators is provided on the departmental website.</p> <p>Some upper level courses have math pre-requisites as well (Probability/Statistics or Linear Algebra most commonly), so plan ahead.</p></td></tr></table>
<p class="firstpara">Short courses cannot be used toward the minor requirements. All courses must be taken for a grade, not Satisfactory/Unsatisfactory.</p>
<p class="BodyText1"><span>Students whose primary major is in the Whiting School may use the same courses to satisfy the requirements of the primary major and also those of a computer science minor. Students who plan to fulfill requirements for a minor must go to the Department of Computer Science director of undergraduate studies to declare the minor and be advised on course selections, and inform the Office of Academic Advising by the end of their junior year.</span></p>
<h3>Short Courses</h3>
<p class="firstpara">The Department of Computer Science offers 1-credit short courses covering a variety of topics in computer science and engineering. The purpose of the short courses is to expose students to topics of current interest in the field of computer science and engineering. Short courses are taught not only by faculty and graduate students in the Department of Computer Science and visiting faculty from other universities, but by individuals from local government or industry who have demonstrable expertise in a given area and are practicing the application of computer science theory and concepts.</p>
<p class="BodyText1"><span>Students should be aware that short course offerings are likely to change from year to year, depending on instructor commitments: there is no guarantee that the same course will be available at a later time. Students interested in getting details about a particular short course can contact the instructor through the departmental office. No more than 3 credits of short courses may be applied toward the computer science course credit requirement for the B.S. or the B.A. degrees.</span></p>
<h3>Double Majors with Computer Science</h3>
<p class="firstpara"><span>It is possible for students to pursue a double major program in which one of the majors is computer science. The computer science requirements are flexible enough to allow for combination with most majors in the Whiting School of Engineering and the Krieger School of Arts and Sciences. Whether computer science is your primary or secondary major, you will be assigned a faculty advisor in the department. In order to declare a first or second major in computer science, students should see the Director of Undergraduate Studies before the start of senior year. Those students must also inform the Office of Academic Affairs of the Whiting School of Engineering and the Registrar of their double major status. Subject to restrictions set by the department offering a second major, students whose primary major is in the Whiting School may use courses to satisfy both the requirements of the student’s primary major and those of a double major.</span></p>
<h3>Combined Bachelor’s/Master’s Program</h3>
<p class="firstpara">As early as the end of their sophomore year, qualified students may apply for admission to a combined bachelor’s/master’s program which combines a B.S. or B.A. degree (in any department) with a master of science in engineering degree in Computer Science. This program allows students to simultaneously pursue both an undergraduate and a graduate degree program of study. Generally, the combined B.S./M.S.E. or B.A./M.S.E. program is accomplished in five years, although some students take more or less time. Applicants are judged on the basis of their performance in courses and their letters of recommendation. Double counting of at most two courses is subject to current WSE and departmental policies. Students may not take a 600.3xx course as an undergraduate and the corresponding 600.4xx course for the M.S.E.; likewise for 600.4xx/6xx course offerings. Upon admission to the program students will be assigned a graduate faculty advisor in the Computer Science Department who must approve the courses to be applied toward the master’s degree. For information on the requirements of the M.S.E. degree, see the Graduate Programs tab on this page, or ask in the departmental office for the document that lists those requirements.</p>
<p class="backtotop"><a href="#top">Back to top</a></p>
			</div>
			<div id="graduatetextcontainer" class="tab_content" role="tabpanel">
				<a name="graduatetext"></a><p>Every graduate student in the Department of Computer Science must follow a program approved by a faculty advisor in the department. The advisor assigned to a student may change, subject to the acceptance of the new advisor.</p>
<h2>Requirements for the M.S.E. Degree</h2>
<p class="firstpara">The Master of Science in Engineering (M.S.E.) is a daytime in-person program offered by the Department of Computer Science. Most students complete the program in three full-time semesters. Two consecutive semesters of residence as a full-time graduate student are required. Those interested in part-time evening/remote study should refer to Engineering for Professionals at <strong><span><a href="http://ep.jhu.edu" target="_blank">ep.jhu.edu</a>.</span></strong></p>
<p class="BodyText1">Entering students are expected to have completed a program of study equivalent to that required by the B.S. in computer science. Applicants from other disciplines are expected to have coursework (or equivalent experience) in intermediate programming (C++ and Java), data structures, computer system fundamentals, and automata theory. Upon admission to the Master of Science in Engineering program, a student is assigned a graduate advisor from the Department of Computer Science who must approve the courses to be applied to the M.S.E. degree.</p>
<p class="BodyText1">The Department of Computer Science classifies its courses into three sub-areas: Analysis, Applications, and Systems. All M.S.E. candidates must complete at least two courses (3 class hours (credits) each) from each of these three areas. Each upper-level course description in this catalog includes its area for reference. A course in multiple areas may only be counted toward one requirement. A current <a href="http://cs.jhu.edu/courses/courseareas.pdf">listing of courses with area designators</a> is provided on the departmental website. While this listing includes a few highly relevant courses outside the Department of Computer Science, only one such course may be applied toward the area requirements. M.S.E. students must also complete an additional two elective courses (chosen from any CS area or from closely related departments such as Electrical and Computer Engineering, Cognitive Science, Mathematics, or Applied Mathematics and Statistics) for a total of eight graduate courses.  <span>Computer Science graduate students may count 400-level courses in our department towards their degree, in addition to the standard 600-level and above graduate courses.  </span><em><span>The coursework program must be approved by the student’s faculty advisor.</span></em></p>
<p class="BodyText1">In addition to the eight courses, a student must elect one of the following options in order to fulfill the degree requirements:</p>
<ul>
	<li>Two additional (graduate) courses in Computer Science, approved as above.</li>
	<li>A supervised research project including an approved project report that will be made publicly available.</li>
	<li>An original, faculty-approved master’s essay, submitted to the Milton S. Eisenhower Library.</li>
</ul>
<p class="BodyText1">By satisfying the Ph.D. qualifying course requirements and the first qualifying project, a student will also satisfy the M.S.E. degree requirements (unless more than two course requirements have been satisfied using courses transferred from other institutions). Please refer to the Ph.D. program information for details.</p>
<p class="BodyText1">All M.S.E. degree candidates are encouraged to regularly attend the department seminars. You may enroll in <span class="sc_courseinline"><a href="/search/?P=EN.600.601" title="EN.600.601" class="bubblelink code" onclick="return showCourse(this, 'EN.600.601');">EN.600.601</a> Computer Science Seminar</span>-<span class="sc_courseinline"><a href="/search/?P=EN.600.602" title="EN.600.602" class="bubblelink code" onclick="return showCourse(this, 'EN.600.602');">EN.600.602</a> Computer Science Seminar</span>; however, these courses may not be counted toward the degree course requirements.</p>

<h3>Course Requirement Details</h3>
<ul>
	<li>All courses counted toward the M.S.E. degree requirement must be taken at a graduate-appropriate level. In the Department of Computer Science, this includes courses that are 600-level and above, as well as 400-level courses.</li>
	<li>At most, two courses with grades less than B- may be counted toward the coursework requirements. No courses with grades less than C- may be counted.</li>
	<li>The overall grade point average of the courses counted toward the coursework requirements must be a 3.0 or higher (B average).</li>
	<li>At most, two independent study courses can be counted toward the course requirements.</li>
	<li>Other than independent study courses, no courses with grades of P can be counted toward the coursework requirement. Courses with grades of P will not be included in the grade point average calculation.</li>
	<li>One of the courses required for the M.S.E. degree, but only one, can be replaced by 3 credits from comparable short courses.</li>
	<li>A majority of the courses counted toward the degree must be taught in the Department of Computer Science.</li>
	<li>At most, two courses can be transferred from graduate programs of other institutions to be counted toward the degree requirements. Such transfer courses must be approved by the student’s faculty advisor and the department. It is the obligation of the student to provide all necessary data to the Department of Computer Science regarding the course(s) for which transfer credit is being requested.</li>
	<li><span>A grade of D or F results in probation; a second D or F is cause for being dropped from the program.</span></li>
	<li>Any master’s student engaged in research for payment or to help meet degree requirements is required to complete Responsible Conduct of Research training. Students receiving payment from NIH training grants or fellowships must take the in person course—<span class="sc_courseinline"><a href="/search/?P=AS.360.625" title="AS.360.625" class="bubblelink code" onclick="return showCourse(this, 'AS.360.625');">AS.360.625</a> Responsible Conduct of Research</span>. All other students can take the course online—<span class="sc_courseinline"><a href="/search/?P=AS.360.624" title="AS.360.624" class="bubblelink code" onclick="return showCourse(this, 'AS.360.624');">AS.360.624</a> Responsible Conduct of Research (Online)</span>. Instructions for accessing and signing up for the course can be found here: <a href="http://engineering.jhu.edu/wse-research/resources-policies-forms/responsible-conduct-of-research/online-training-course-for-the-responsible-conduct-of-research/">http://engineering.jhu.edu/wse-research/resources-policies-forms/responsible-conduct-of-research/online-training-course-for-the-responsible-conduct-of-research/</a> Additional information regarding this training can be found here: <a href="http://eng.jhu.edu/wse/page/conduct-of-research-training" target="_blank"><span>http://eng.jhu.edu/wse/page/​conduct-of-research-training</span></a>. Students who are required to complete this training will not receive a diploma until the course has been completed.</li>

</ul>

<h3>Tuition Support</h3>
<p class="firstpara">M.S.E. students are not normally eligible for tuition waivers, but will be able to work on campus up to 19.99 hours per week for hourly rates. There are also course assistant positions available for qualified students who are seeking financial support. Those interested must apply at the start of each semester for specific courses in need.</p>
<h2>Requirements for the Ph.D. Degree</h2>
<p class="firstpara">The goal of the Doctor of Philosophy (Ph.D.) program in the Department of Computer Science is to prepare first-rate scholars in the analysis, systems, and applications areas of computer science. Successful graduates may assume significant positions in academia, research institutes, industry, or government laboratories.</p>
<p class="BodyText1">Applications for admission to the Ph.D. program in Computer Science are reviewed by a faculty committee. Although the specific criteria are not rigid, all students admitted will exhibit exceptional intellectual achievements and promise. Applicants must submit letters of recommendation, GRE scores, and (for foreign applicants) TOEFL scores.</p>
<p class="BodyText1">In keeping with Hopkins’ traditions, program requirements are flexible, as described below.  For more detailed policies regarding the PhD program, please visit the <a href="http://www.cs.jhu.edu/graduate-studies/phd-requirements/">Advising Manual</a> on our departmental website.</p>
<h3>University Residency</h3>
<p class="firstpara">Two consecutive semesters of residence as a full-time graduate student are required.</p>
<h3>Seminar Attendance</h3>
<p class="firstpara"><span>All Ph.D. degree candidates are required to enroll and maintain satisfactory attendance in Computer Science Seminar 600.601-602 each semester for the duration of their enrollment in the program. Although seminar attendance is required, the seminar may not be counted toward the qualifying course requirement.</span></p>
<h3>Responsible Conduct of Research</h3>
<p class="firstpara">All doctoral students are required to take <span class="sc_courseinline"><a href="/search/?P=AS.360.625" title="AS.360.625" class="bubblelink code" onclick="return showCourse(this, 'AS.360.625');">AS.360.625</a> Responsible Conduct of Research</span>. Students are expected to complete the course by the end of the first year but have until the start of the fourth semester to meet this requirement. Failure to do so may result in a loss of funding. Additional information regarding this requirement can be found here: <a href="http://eng.jhu.edu/wse/page/conduct-of-research-training" target="_blank"><span>http://eng.jhu.edu/wse/page/​conduct-of-research-training</span></a>.</p>

<h3>Qualifying Course Requirements</h3>
<p class="firstpara">The Department of Computer Science classifies its courses into three research areas: analysis, applications, and systems. All Ph.D. candidates must complete at least two courses (3 class hours each) from each of these three areas. Each upper-level course description in this catalog includes its area for reference. A course in multiple areas may only be counted toward one requirement.A current <a href="http://cs.jhu.edu/courses/courseareas.pdf">listing of courses with area designators</a> is provided on the departmental website. While this listing includes a few highly relevant courses outside the Department of Computer Science, only one such course may be applied toward the area requirements. Ph.D. students must also complete an additional two elective graduate courses (chosen from any CS area or from closely related departments such as Electrical and Computer Engineering, Cognitive Science, Mathematics, or Applied Mathematics and Statistics) for a total of eight courses.  Computer Science graduate students may count 400-level courses in our department towards their degree, in addition to the standard 600-level and above graduate courses. <em><span>The coursework program must be approved by the student’s faculty advisor.</span></em> The overall grade point average for these eight courses must be at least equivalent to a B+. No course with a grade of less than C- may be counted toward this Ph.D. qualifying course requirement. Other than independent study courses, no courses with grades of P can be counted toward the coursework requirement. Courses with grades of P will not be included in the grade point average calculation. One of the courses required for the degree, but only one, may be replaced by 3 credits from comparable short courses. With approval of the student’s faculty advisor, up to two courses can be transferred from graduate programs of other institutions; more than two such courses can be transferred with approval of the department. It is the obligation of the student to provide all necessary data to the Department of Computer Science regarding the course(s) for which transfer credit is being requested. Students are expected to complete the course requirements by the end of their second year as a Ph.D. candidate.</p>
<h3>Qualifying Project Requirements</h3>
<p class="firstpara">A Ph.D. student must complete two projects, each under the supervision and with the written agreement of a different faculty member in the Department of Computer Science. Upon conclusion of each project, the student must write a “Project Report” describing the project in detail. This report will be a public document and will be kept on file in the department office. The supervising faculty member must approve the project report. Students are expected to complete the qualifying projects by the end of their third year as a Ph.D. candidate.</p>
<p class="BodyText1"><span>Upon completion of the Ph.D. qualifying course requirements and the first qualifying project, students are ordinarily eligible to receive a master of science in engineering degree. The degree will be awarded upon student request.</span></p>
<h3>Graduate Board Oral Examination (GBO)</h3>
<p class="firstpara"><span>This examination is a university requirement, ideally taken in the student's third year. The oral exam is administered by a panel consisting of the research sponsor, two faculty members from the Department of Computer Science, and two from outside the department. The exam seeks to establish the student’s readiness to conduct original research in the area of his or her “Preliminary Research Proposal,” which should be distributed to the examiners in advance and presented by the student at the start of the exam.</span></p>
<h3>Part-Time Ph.D.</h3>
<p class="firstpara">Two consecutive semesters of residence as a full-time graduate student are required by the university. Part-time students must pass both the Ph.D. qualifying requirements and the Graduate Board oral exam within four years of being admitted to the program. Attempting to obtain a Ph.D. is a major commitment and involves close coordination with a faculty advisor in the department. Part-time students must be able to establish and maintain these close links.</p>
<h3>Departmental Seminar</h3>
<p class="firstpara">Ph.D. students must give an official departmental seminar on their research area. This is to be done after the GBO and prior to the dissertation defense, or as part of the dissertation defense.</p>
<h3>Dissertation and Defense</h3>
<p class="firstpara">Ph.D. students must write a dissertation consisting of original research in their chosen area. They must deliver a public presentation of the dissertation before a dissertation committee consisting of the faculty advisor, a second faculty member in the Department of Computer Science (who must have a primary tenure-track appointment in the Department if the advisor does not), and one or more other members with Ph.D. degrees. In conformity with University requirements, the members of the dissertation committee must submit a referee’s letter to the Graduate Board recommending that the dissertation be accepted. Completed dissertations will be formatted and submitted to the Milton S. Eisenhower Library for<a href="http://guides.library.jhu.edu/etd"> electronic publication</a>.</p>
<h3>Teaching Requirement</h3>
<p class="firstpara">Beginning in Fall 2015, all Ph.D. students are required to serve as a Teaching Assistant at least one semester during their program of study.  As part of the requirement, the supervising course instructor must give the TA an opportunity to be in front of a group of students at least once during the course.  Students are required to sign-up for the course EN.600.807 Teaching Practicum during the semester in which the requirement is being fulfilled, and at the end of the semester his/her performance will be evaluated by the course instructor.</p>
<h3>Student Progress Review</h3>
<p class="firstpara">Ph.D. students are reviewed annually by their advisor(s) and the department, and notified in writing as to their standing in the program.  Students deemed to not be making satisfactory progress may be placed on probation.</p>
<h3>Financial Aid</h3>
<p class="firstpara">Financial aid is available for candidates of high promise. Fellowships provide a student with a stipend plus tuition. Research assistantships are available on sponsored research projects directed by members of the faculty.  Teaching assistantships normally consist of tuition plus a stipend commensurate with the teaching or grading duties assigned. Students determined to have significant deficiency in spoken English may be required to take one or more semesters of English as a Second Language in order to qualify for employment as a teaching or research assistant.</p>
<p class="backtotop"><a href="#top">Back to top</a></p>
			</div>
<div id="courseinventorycontainer" class="tab_content">
<a name="courseinventory"></a>
<div class="courses">
<a name="en computer sciencecourses"></a>
<p>For current course information and registration go to <a href="https://sis.jhu.edu/classes/">https://sis.jhu.edu/classes/</a></p><h3>Courses</h3>

<div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.104.  Computer Ethics.  2.00 Credits.</strong></p>
<p class="courseblockdesc">
Students will examine a variety of topics regarding policy, legal, and moral issues related to the computer science profession itself and to the proliferation of computers in all aspects of society, especially in the era of the Internet. The course will cover various general issues related to ethical frameworks and apply those frameworks more specifically to the use of computers and the Internet. The topics will include privacy issues, computer crime, intellectual property law -- specifically copyright and patent issues, globalization, and ethical responsibilities for computer science professionals. Work in the course will consist of weekly assignments on one or more of the readings and a final paper on a topic chosen by the student and approved by the instructor.<br />Instructor(s): S. Kosaraju
<br />Area: Humanities.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.105.  M &amp; Ms: Freshman Experience.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This course is required for all freshmen Computer Science majors. Transfers into the major and minors may enroll by permission only. Students will attend four 3-week blocks of meetings with different computer science professors, focused on a central theme. Active participation is required. Satisfactory/Unsatisfactory only.<br />Instructor(s): J. Selinski.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.107.  Introductory Programming in Java.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course introduces fundamental structured and object-oriented programming concepts and techniques, using Java, and is intended for all who plan to use computer programming in their studies and careers. Topics covered include variables, arithmetic operators, control structures, arrays, functions, recursion, dynamic memory allocation, files, class usage and class writing. Program design and testing are also covered, in addition to more advanced object oriented concepts including inheritance and exceptions as time permits. First-time programmers are strongly advised to take <a href="/search/?P=EN.600.108" title="EN.600.108" class="bubblelink code" onclick="return showCourse(this, 'EN.600.108');">EN.600.108</a> concurrently in Fall/Spring semesters.<br /><strong>Prerequisites: Students may receive credit for <a href="/search/?P=EN.600.107" title="EN.600.107" class="bubblelink code" onclick="return showCourse(this, 'EN.600.107');">EN.600.107</a> or <a href="/search/?P=EN.600.112" title="EN.600.112" class="bubblelink code" onclick="return showCourse(this, 'EN.600.112');">EN.600.112</a>, but not both.</strong>
<br />Instructor(s): S. More
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.108.  Introduction to Programming Lab.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This course is intended for novice programmers, and must be taken in conjunction with <a href="/search/?P=EN.600.107" title="EN.600.107" class="bubblelink code" onclick="return showCourse(this, 'EN.600.107');">EN.600.107</a>. The purpose of this course is to give first-time programmers extra hands-on practice with guided supervision. Students will work in pairs each week to develop working programs, with checkpoints for each development phase. Must have familiarity with computers. Satisfactory/Unsatisfactory only.<br /><strong>Prerequisites: Coreq for <a href="/search/?P=EN.600.108" title="EN.600.108" class="bubblelink code" onclick="return showCourse(this, 'EN.600.108');">EN.600.108</a>: <a href="/search/?P=EN.600.107" title="EN.600.107" class="bubblelink code" onclick="return showCourse(this, 'EN.600.107');">EN.600.107</a></strong>
<br /><strong>Corequisites : Coreq: <a href="/search/?P=EN.600.107" title="EN.600.107" class="bubblelink code" onclick="return showCourse(this, 'EN.600.107');">EN.600.107</a></strong>
<br />Instructor(s): S. More
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.112.  Introductory Programming for Scientists and Engineers.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
An introductory learning by doing programming course for scientists, engineers, and everybody else who will need basic programming skills in their studies and careers. We cover the fundamentals of structured, modular, and (to some extent) object-oriented programming as well as important design principles and software development techniques. We will apply our shiny new programming skills by developing computational solutions in the Python programming language to a number of real-world problems from a variety of disciplines.  This course may not be used for the CS major or minor requirements, except as a substitute for 600.107. Summer only: Students will be expected to do significant programming (15-20 hours/wk). Attendance and participation is required.  Students must have a laptop on which to install and run the programming environment.<br /><strong>Prerequisites: Students who have taken <a href="/search/?P=EN.600.107" title="EN.600.107" class="bubblelink code" onclick="return showCourse(this, 'EN.600.107');">EN.600.107</a> may not register for <a href="/search/?P=EN.600.112" title="EN.600.112" class="bubblelink code" onclick="return showCourse(this, 'EN.600.112');">EN.600.112</a>.;Students who have taken EN.600.111 may not register for <a href="/search/?P=EN.600.112" title="EN.600.112" class="bubblelink code" onclick="return showCourse(this, 'EN.600.112');">EN.600.112</a>.</strong>
<br />Instructor(s): J. Selinski
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.113.  IPSE Lab.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This course is intended for novice programmers, and must be taken in conjunction with <a href="/search/?P=EN.600.112" title="EN.600.112" class="bubblelink code" onclick="return showCourse(this, 'EN.600.112');">EN.600.112</a>. The purpose of this course is to give first-time programmers hands-on practice with guided supervision. Students may receive credit for <a href="/search/?P=EN.600.108" title="EN.600.108" class="bubblelink code" onclick="return showCourse(this, 'EN.600.108');">EN.600.108</a> or <a href="/search/?P=EN.600.113" title="EN.600.113" class="bubblelink code" onclick="return showCourse(this, 'EN.600.113');">EN.600.113</a>, but not both. 
Co-requisite: <a href="/search/?P=EN.600.112" title="EN.600.112" class="bubblelink code" onclick="return showCourse(this, 'EN.600.112');">EN.600.112</a>. Satisfactory/Unsatisfactory only.<br /><strong>Prerequisites: Corequisite: <a href="/search/?P=EN.600.112" title="EN.600.112" class="bubblelink code" onclick="return showCourse(this, 'EN.600.112');">EN.600.112</a>;Students may receive credit for <a href="/search/?P=EN.600.108" title="EN.600.108" class="bubblelink code" onclick="return showCourse(this, 'EN.600.108');">EN.600.108</a> or <a href="/search/?P=EN.600.113" title="EN.600.113" class="bubblelink code" onclick="return showCourse(this, 'EN.600.113');">EN.600.113</a>, but not both.</strong>
<br />Instructor(s): J. Selinski
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.120.  Intermediate Programming.  4.00 Credits.</strong></p>
<p class="courseblockdesc">
This course teaches intermediate to advanced programming, using C and C++. (Prior knowledge of these languages is not expected.) We will cover low-level programming techniques, as well as object-oriented class design, and the use of class libraries. Specific topics include pointers, dynamic memory allocation, polymorphism, overloading, inheritance, templates, collections, exceptions, and others as time permits. Students are expected to learn syntax and some language specific features independently. Course work involves significant programming projects in both languages. Recommended Course Background: AP CS, <a href="/search/?P=EN.600.107" title="EN.600.107" class="bubblelink code" onclick="return showCourse(this, 'EN.600.107');">EN.600.107</a>, EN.600.111, <a href="/search/?P=EN.600.112" title="EN.600.112" class="bubblelink code" onclick="return showCourse(this, 'EN.600.112');">EN.600.112</a> or equivalent.<br />Instructor(s): M. Kazhdan; S. More
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.145.  Mini Term: Introduction to Computer-Integrated Surgery.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This course will give an introduction to the concepts and major elements of computer-integrated surgery (CIS) through clinical applications. Students will learn to ask questions and look for answers the way clinical engineers build and analyze CIS systems. Major topics will include medical imaging, image processing, surgical planning, surgical robotics, robot navigation, systems integration, and clinical validation. No computer programming will be necessary to complete the assignments.<br />Instructor(s): S. Leonard
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.226.  Data Structures.  4.00 Credits.</strong></p>
<p class="courseblockdesc">
This course covers the design and implementation of data structures including arrays, stacks, queues, linked lists, binary trees, heaps, balanced trees (e.g. 2-3 trees, AVL-trees) and graphs. Other topics include sorting, hashing, memory allocation, and garbage collection. Course work involves both written homework and Java programming assignments.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.107" title="EN.600.107" class="bubblelink code" onclick="return showCourse(this, 'EN.600.107');">EN.600.107</a> or <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> or permission of instructor.</strong>
<br />Instructor(s): J. Selinski; P. Froehlich; S. More
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.233.  Computer System Fundamentals.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
[Formerly EN.600.333/433] We study the design and performance of a variety of computer systems from simple 8-bit micro-controllers through 32/64-bit RISC architectures all the way to ubiquitous x86 CISC architecture. We'll start from logic gates and digital circuits before delving into arithmetic and logic units, registers, caches, memory, stacks and procedure calls, pipelined execution, super-scalar architectures, memory management units, etc. Along the way we'll study several typical instruction set architectures and review concepts such as interrupts, hardware and software exceptions, serial and other peripheral communications protocols, etc. A number of programming projects, frequently done in assembly language and using various processor simulators, round out the course. [Systems]. Students may receive credit for only one of <a href="/search/?P=EN.600.233" title="EN.600.233" class="bubblelink code" onclick="return showCourse(this, 'EN.600.233');">EN.600.233</a>, EN.600.333 or <a href="/search/?P=EN.600.433" title="EN.600.433" class="bubblelink code" onclick="return showCourse(this, 'EN.600.433');">EN.600.433</a>.<br />Instructor(s): P. Froehlich
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.250.  User Interfaces and Mobile Applications.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will provide students with a rich development experience, focused on the design and implementation of user interfaces and mobile applications. A brief overview of human computer interaction will provide context for designing, prototyping and evaluating user interfaces. Students will invent their own mobile applications and implement them using the Android SDK, which is JAVA based. An overview of the Android platform and available technologies will be provided, as well as XML for layouts, and general concepts for effective mobile development. Students will be expected to explore and experiment with outside resources in order to learn technical details independently. There will also be an emphasis on building teamwork skills, and on using modern development techniques and tools.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): J. Selinski
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.255.  Introduction to Video Game Design.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
A broad survey course in video game design (as opposed to mathematical game theory), covering artistic, technical, as well as sociological aspects of video games. Students will learn about the history of video games, archetypal game styles, computer graphics and programming, user interface and interaction design, graphical design, spatial and object design, character animation, basic game physics, plot and character development, as well as psychological and sociological impact of games. Students will design and implement an experimental video game in interdisciplinary teams of 3-4 students as part of a semester-long project. Section 1 requires technical skills, including at least one programming course (preferably 2 or more). Section 2 requires artistic skills, including at least one multimedia course (preferably 2 or more). Open to sophomores and above.<br /><strong>Corequisites : Co-req: 600.256</strong>
<br />Instructor(s): P. Froehlich
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.256.  Introduction to Video Game Design Lab.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
A lab course in support of 600.255: Introduction to Video Game Design covering a variety of multi-media techniques and applications from image processing, through sound design, to 3D modeling and animation. See 600.255: Introduction to Video Game Design for details about enrolling.<br /><strong>Corequisites : <a href="/search/?P=EN.600.255" title="EN.600.255" class="bubblelink code" onclick="return showCourse(this, 'EN.600.255');">EN.600.255</a>[C]</strong>
<br />Instructor(s): P. Froehlich.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.271.  Automata &amp; Computation Theory.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course is an introduction to the theory of computing. topics include design of finite state automata, pushdown automata, linear bounded automata, Turing machines and phrase structure grammars; correspondence between automata and grammars; computable functions, decidable and undecidable problems, P and NP problems, NP-completeness, and randomization. Students may not receive credit for <a href="/search/?P=EN.600.271" title="EN.600.271" class="bubblelink code" onclick="return showCourse(this, 'EN.600.271');">EN.600.271</a> and <a href="/search/?P=EN.600.471" title="EN.600.471" class="bubblelink code" onclick="return showCourse(this, 'EN.600.471');">EN.600.471</a> for the same degree.<br /><strong>Prerequisites:  <a href="/search/?P=EN.550.171" title="EN.550.171" class="bubblelink code" onclick="return showCourse(this, 'EN.550.171');">EN.550.171</a></strong>
<br />Instructor(s): X. Li
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.315.  Databases.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Introduction to database management systems and database design, focusing on the relational and object-oriented data models, query languages and query optimization, transaction processing, parallel and distributed databases, recovery and security issues, commercial systems and case studies, heterogeneous and multimedia databases, and data mining. [Systems] (www.cs.jhu.edu/~yarowsky/cs415.html)
Students may receive credit for <a href="/search/?P=EN.600.315" title="EN.600.315" class="bubblelink code" onclick="return showCourse(this, 'EN.600.315');">EN.600.315</a> or <a href="/search/?P=EN.600.415" title="EN.600.415" class="bubblelink code" onclick="return showCourse(this, 'EN.600.415');">EN.600.415</a>, but not both.<br /><strong>Prerequisites: Students may receive credit for 600.315 or 600.415, but not both.;Prerequiste: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): D. Yarowsky
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.316.  Database Systems.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course serves as an introduction to the architecture and design of modern database management systems. topics include query processing algorithms and data structures, data organization and storage, query optimization and cost modeling, transaction management and concurrency control, high-availability mechanisms, parallel and distributed databases, and a survey of modern architectures including NoSQL, column-oriented and streaming databases. Course work includes programming assignments and experimentation in a simple database framework written in Java. [Systems] 
Students may receive credit for <a href="/search/?P=EN.600.316" title="EN.600.316" class="bubblelink code" onclick="return showCourse(this, 'EN.600.316');">EN.600.316</a> or <a href="/search/?P=EN.600.416" title="EN.600.416" class="bubblelink code" onclick="return showCourse(this, 'EN.600.416');">EN.600.416</a>, but not both.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a>;Students may receive credit for <a href="/search/?P=EN.600.316" title="EN.600.316" class="bubblelink code" onclick="return showCourse(this, 'EN.600.316');">EN.600.316</a> or <a href="/search/?P=EN.600.416" title="EN.600.416" class="bubblelink code" onclick="return showCourse(this, 'EN.600.416');">EN.600.416</a>, but not both.</strong>
<br />Instructor(s): Y. Ahmad
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.318.  Operating Systems.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course covers fundamental topics related to operating systems theory and practice. Topics include processor management, storage management, concurrency control, multi-programming and processing, device drivers, operating system components (e.g., file system, kernel), modeling and performance measurement, protection and security, and recent innovations in operating system structure. Course work includes the implementation of operating systems techniques and routines, and critical parts of a small but functional operating system. Students may receive credit for <a href="/search/?P=EN.600.318" title="EN.600.318" class="bubblelink code" onclick="return showCourse(this, 'EN.600.318');">EN.600.318</a> or <a href="/search/?P=EN.600.418" title="EN.600.418" class="bubblelink code" onclick="return showCourse(this, 'EN.600.418');">EN.600.418</a> but not both. Recommended Course Background: EN.600.211<br /><strong>Prerequisites: Students may receive credit for <a href="/search/?P=EN.600.318" title="EN.600.318" class="bubblelink code" onclick="return showCourse(this, 'EN.600.318');">EN.600.318</a> or <a href="/search/?P=EN.600.418" title="EN.600.418" class="bubblelink code" onclick="return showCourse(this, 'EN.600.418');">EN.600.418</a> but not both.;Prereqs: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a> AND (<a href="/search/?P=EN.600.233" title="EN.600.233" class="bubblelink code" onclick="return showCourse(this, 'EN.600.233');">EN.600.233</a> OR EN.600.333)</strong>
<br />Instructor(s): P. Froehlich
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.320.  Parallel Programming.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course prepares the programmer to tackle the massive data sets and huge problem size of modern scientific and enterprise computing. Google and IBM have commented that undergraduate CS majors are unable to break the single server mindset (http://www.google.com/intl/en/ press/pressrel/20071008_ibm_univ.html). Students taking this course will abandon the comfort of serial algorithmic thinking and learn to harness the power of cutting-edge software and hardware technologies. The issue of parallelism spans many architectural levels. Even ``single server'' systems must parallelize computation in order to exploit the inherent parallelism of recent multi-core processors. The course will examine different forms of parallelism in four sections. These are: (1) massive data-parallel computations with Hadoop!; (2) programming compute clusters with MPI; (3) thread-level parallelism in Java; and, (4) GPGPU parallel programming with NVIDIA's Cuda. Each section will be approximately 3 weeks and each section will involve a programming project. The course is also suitable for undergraduate and graduate students from other science and engineering disciplines that have prior programming experience. [Systems] 
Students may receive credit for <a href="/search/?P=EN.600.320" title="EN.600.320" class="bubblelink code" onclick="return showCourse(this, 'EN.600.320');">EN.600.320</a> or <a href="/search/?P=EN.600.420" title="EN.600.420" class="bubblelink code" onclick="return showCourse(this, 'EN.600.420');">EN.600.420</a>, but not both.
Recommended Course Background:.<a href="/search/?P=EN.600.233" title="EN.600.233" class="bubblelink code" onclick="return showCourse(this, 'EN.600.233');">EN.600.233</a><br />Instructor(s): R. Burns
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.321.  Object Oriented Software Engineering.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course covers object-oriented software construction methodologies and their application. The main component of the course is a large team project on a topic of your choosing. Course topics covered include object-oriented analysis and design, UML, design patterns, refactoring, program testing, code repositories, team programming, and code reviews. [Systems or Applications] (http://pl.cs.jhu.edu/oose/index.shtml)
Students may receive credit for <a href="/search/?P=EN.600.321" title="EN.600.321" class="bubblelink code" onclick="return showCourse(this, 'EN.600.321');">EN.600.321</a> or <a href="/search/?P=EN.600.421" title="EN.600.421" class="bubblelink code" onclick="return showCourse(this, 'EN.600.421');">EN.600.421</a>, but not both.<br /><strong>Prerequisites: Students may receive credit for 600.321 or 600.421, but not both.;<a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): S. Smith
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.323.  Data-Intensive Computing.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Data-Intensive Computing is an experiential education course in computing with massive data sets that covers the software, algorithms, and systems used to ingest, store, and analyze. Specific topics include: NoSQL software systems including key/value stores and graph databases, scientific python, array databases, (semi)-external memory array and graph algorithms, extract-transform-load (ETL) processing, spatial indexing, OpenCL GPU code acceleration, and performance management of clusters. The course will utilize the unique computing resources at JHU, including the DataScope (5PB of storage), the GPU cluster (110 TFlops), and the Homewood High Performance Computing Cluster (1600 cores). The entire course will take place in several lengthy lab sessions each week. Course time will be divided roughly into team projects (30%), ad-hoc tasks (50%), presentation (10%) and using collaboration tools for concurrent reading and authoring and interactive self-assessment.  [Systems]<br /><strong>Prerequisites: <a href="/search/?P=EN.600.320" title="EN.600.320" class="bubblelink code" onclick="return showCourse(this, 'EN.600.320');">EN.600.320</a> OR <a href="/search/?P=EN.600.420" title="EN.600.420" class="bubblelink code" onclick="return showCourse(this, 'EN.600.420');">EN.600.420</a></strong>
<br />Instructor(s): R. Burns
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.325.  Declarative Methods.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Suppose you could simply write down a description of your problem, and let the computer figure out how to solve it. What notation could you use? What strategy should the computer then use? In this survey class, you'll learn to recognize when your problem is an instance of satisfiability, constraint programming, logic programming, dynamic programming, or mathematical programming (e.g., integer linear programming). For each of these related paradigms, you'll learn to reformulate hard problems in the required notation and apply off-the-shelf software that can solve any problem in that notation -- including NP-complete problems and many of the problems you'll see in other courses and in the real world. You'll also gain some understanding of the general-purpose algorithms that power the software. [Analysis]
Students can only receive credit for <a href="/search/?P=EN.600.325" title="EN.600.325" class="bubblelink code" onclick="return showCourse(this, 'EN.600.325');">EN.600.325</a> or <a href="/search/?P=EN.600.425" title="EN.600.425" class="bubblelink code" onclick="return showCourse(this, 'EN.600.425');">EN.600.425</a>, not both.<br />Instructor(s): J. Eisner
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.328.  Compilers and Interpreters.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Introduction to compiler design, including lexical analysis, parsing, syntax-directed translation, symbol tables, run-time environments, and code generation and optimization. Students are required to write a compiler as a course project.[Systems] 
Co-listed with <a href="/search/?P=EN.600.428" title="EN.600.428" class="bubblelink code" onclick="return showCourse(this, 'EN.600.428');">EN.600.428</a><br /><strong>Prerequisites: ;<a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): P. Froehlich
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.335.  Artificial Intelligence.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
The course situates the study of Artificial Intelligence (AI) first in the broader context of Philosophy of Mind and Cognitive Psychology and then treats in-depth methods for automated reasoning, automatic problem solvers and planners, knowledge representation mechanisms, game playing, machine learning, and statistical pattern recognition. The class is a recommended for all scientists and engineers with a genuine curiosity about the fundamental obstacles to getting machines to perform tasks such as deduction, learning, and planning and navigation. Strong programming skills and a good grasp of the English language are expected; students will be asked to complete both programming assignments and writing assignments. The course will include a brief introduction to scientific writing and experimental design, including assignments to apply these concepts. [Applications]
Prereq: 600.226, 550.171; Recommended: linear algebra, prob/stat. Students can only receive credit for 600.335 or 600.435, not both.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a>[C] AND <a href="/search/?P=EN.550.171" title="EN.550.171" class="bubblelink code" onclick="return showCourse(this, 'EN.550.171');">EN.550.171</a>[C]</strong>
<br />Instructor(s): P. Koehn
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.337.  Distributed Systems.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course teaches how to design and implement protocols that enable processes to exchange information, cooperate, and coordinate efficiently in a consistent manner over a computer network. Topics include communication protocols, group communication, distributed databases, distributed operating systems, and security. [Systems]. Students may receive credit for <a href="/search/?P=EN.600.337" title="EN.600.337" class="bubblelink code" onclick="return showCourse(this, 'EN.600.337');">EN.600.337</a> or <a href="/search/?P=EN.600.437" title="EN.600.437" class="bubblelink code" onclick="return showCourse(this, 'EN.600.437');">EN.600.437</a> but not both.<br /><strong>Prerequisites: Students may receive credit for 600.337 or 600.437, but not both.;</strong>
<br />Instructor(s): Y. Amir
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.340.  Introduction to Genomic Research.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will use a project-based approach to introduce undergraduates to research in computational biology and genomics. During the semester, students will take a series of large data sets, all derived from recent research, and learn all the computational steps required to convert raw data into a polished analysis. Data challenges might include the DNA sequences from a bacterial genome project, the RNA sequences from an experiment to measure gene expression, the DNA from a human microbiome sequencing experiment, and others. Topics may vary from year to year. In addition to computational data analysis, students will learn to do critical reading of the scientific iterature by reading high-profile research papers that generated groundbreaking or controversial results. [Applications] Recommended Course Background: Knowledge of the Unix operating system and programming expertise in a language such as Perl or Python.<br />Instructor(s): S. Salzberg
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.344.  Computer Network Fundamentals.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Topics covered will include application layer protocols (e.g. HTTP, FTP, SMTP), transport layer protocols (UDP, TCP), network layer protocols (e.g. IP, ICMP), link layer protocols (e.g. Ethernet) and wireless protocols (e.g. IEEE 802.11). The course will also cover routing protocols such as link state and distance vector, multicast routing, and path vector protocols (e.g. BGP). The class will examine security issues such as firewalls and denial of service attacks. We will also study DNS, NAT, Web caching and CDNs, peer to peer, and protocol tunneling. Finally, we will explore security protocols (e.g. TLS, SSH, IPsec), as well as some basic cryptography necessary to understand these. Grading will be based on hands-on programming assignments, homeworks and two exams. [Systems] 
Students can only receive credit for <a href="/search/?P=EN.600.344" title="EN.600.344" class="bubblelink code" onclick="return showCourse(this, 'EN.600.344');">EN.600.344</a> or <a href="/search/?P=EN.600.444" title="EN.600.444" class="bubblelink code" onclick="return showCourse(this, 'EN.600.444');">EN.600.444</a>, not both.<br /><strong>Prerequisites: Prereqs For <a href="/search/?P=EN.600.344" title="EN.600.344" class="bubblelink code" onclick="return showCourse(this, 'EN.600.344');">EN.600.344</a>: <a href="/search/?P=EN.600.233" title="EN.600.233" class="bubblelink code" onclick="return showCourse(this, 'EN.600.233');">EN.600.233</a>/333/433 or permission. &#x0D;
Students can only receive credit for <a href="/search/?P=EN.600.344" title="EN.600.344" class="bubblelink code" onclick="return showCourse(this, 'EN.600.344');">EN.600.344</a> or <a href="/search/?P=EN.600.444" title="EN.600.444" class="bubblelink code" onclick="return showCourse(this, 'EN.600.444');">EN.600.444</a>, not both</strong>
<br />Instructor(s): A. DeSimone
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.355.  Video Game Design Project.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
An intensive capstone design project experience in video game development. Students will work in groups of 4-8 on developing a complete video game of publishable quality. Teams will (hopefully) include programmers, visual artists, composers, and writers. Students will be mentored by experts from industry and academia. Aside from the project itself, project management and communication skills will be emphasized. Enrollment is limited to ensure parity between the various disciplines. [General] May involve travel to MICA. Junior or senior standing recommended.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.255" title="EN.600.255" class="bubblelink code" onclick="return showCourse(this, 'EN.600.255');">EN.600.255</a> AND <a href="/search/?P=EN.600.256" title="EN.600.256" class="bubblelink code" onclick="return showCourse(this, 'EN.600.256');">EN.600.256</a> or permission of instructor</strong>
<br />Instructor(s): P. Froehlich
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.357.  Computer Graphics.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course introduces computer graphics techniques and applications, including image processing, rendering, modeling and animation. [Applications] Students may receive credit for <a href="/search/?P=EN.600.357" title="EN.600.357" class="bubblelink code" onclick="return showCourse(this, 'EN.600.357');">EN.600.357</a> or <a href="/search/?P=EN.600.457" title="EN.600.457" class="bubblelink code" onclick="return showCourse(this, 'EN.600.457');">EN.600.457</a>, but not both. No Audits.<br /><strong>Prerequisites:  <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): M. Kazhdan
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.363.  Introduction To Algorithms.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course concentrates on the design of algorithms and the rigorous analysis of their efficiency. topics include the basic definitions of algorithmic complexity (worst case, average case); basic tools such as dynamic programming, sorting, searching, and selection; advanced data structures and their applications (such as union-find); graph algorithms and searching techniques such as minimum spanning trees, depth-first search, shortest paths, design of online algorithms and competitive analysis. [Analysis] 
Students may receive credit for <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a> or <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a>, but not both.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a> and <a href="/search/?P=EN.550.171" title="EN.550.171" class="bubblelink code" onclick="return showCourse(this, 'EN.550.171');">EN.550.171</a> or permission;Students may receive credit for <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a> or <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a>, but not both.</strong>
<br />Instructor(s): V. Braverman
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.365.  Knowledge Discovery from Text.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
The world is full of text: webpages, emails, newspaper articles, tweets, medical records, and so on. The purpose of text is for people to convey knowledge to other people. This course focuses on how computers analyze large, potentially streaming, text collections to automatically discover knowledge on their own (and to help people better find it themselves). Lectures and assignments will cover relevant topics in automatic classification (applied machine learning), linguistics, high-performance computing, and systems engineering, working with software systems for automatic question answering, populating knowledge bases, and aggregate analysis of social media such as Twitter.  [Applications]<br /><strong>Prerequisites: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): B. Van Durme; T. Lippincott
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.371.  Software Tools Practicum.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will survey the wide range of tools, frameworks and packages that form a foundation for much of the modern Internet. Each week, a group of students will present a particular software package to the class, exploring the architectural, historical and competitive aspects. The weekly lab work and assignments will focus on testing the software and understanding its contributions to providing the services that support the Internet. 
The software will be chosen from a list of popular packages like Hudson, Drupal, Docker, WordPress, Node.js, jQuery, Django, Ruby on Rails, Git, Coffeescript, Ember, Angular, MongoDB, Couch, and others. Students will select one package and work with others to explore the packages, learn how they work and then summarize this knowledge by creating a presentation for the class.  [General] CS majors only.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): P. Wayner
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.402.  Digital Health and Biomedical Informatics.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Advances in technology are driving a change in medicine, from personalized medicine to population health. Computers and information technology will be critical to this transition. We shall discuss some of the coming changes in terms of computer technology, including computer-based patient records, clinical practice guidelines, and region-wide health information exchanges. We will discuss the underlying technologies driving these developments - databases and warehouses, controlled vocabularies, and decision support.<br />Instructor(s): H. Lehmann
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.411.  Computer Science Innovation &amp; Entrepreneurship II.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course is the second half of a two-course sequence and is a continuation of course <a href="/search/?P=EN.660.410" title="EN.660.410" class="bubblelink code" onclick="return showCourse(this, 'EN.660.410');">EN.660.410</a>.01, CS Innovation and Entrepreneurship, offered by the Center for Leadership Education (CLE). In this sequel course the student groups, directed by CS faculty, will implement the business idea which was developed in the first course and will present the implementations and business plans to an outside panel made up of practitioners, industry representatives, and venture capitalists. [General]<br /><strong>Prerequisites: <a href="/search/?P=EN.660.410" title="EN.660.410" class="bubblelink code" onclick="return showCourse(this, 'EN.660.410');">EN.660.410</a> AND ( <a href="/search/?P=EN.600.321" title="EN.600.321" class="bubblelink code" onclick="return showCourse(this, 'EN.600.321');">EN.600.321</a> OR <a href="/search/?P=EN.600.421" title="EN.600.421" class="bubblelink code" onclick="return showCourse(this, 'EN.600.421');">EN.600.421</a>)</strong>
<br />Instructor(s): A. Dahbura; L. Aronhime
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.415.  Databases.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate level version of <a href="/search/?P=EN.600.315" title="EN.600.315" class="bubblelink code" onclick="return showCourse(this, 'EN.600.315');">EN.600.315</a> [Systems]. Students may receive credit for <a href="/search/?P=EN.600.315" title="EN.600.315" class="bubblelink code" onclick="return showCourse(this, 'EN.600.315');">EN.600.315</a> or <a href="/search/?P=EN.600.415" title="EN.600.415" class="bubblelink code" onclick="return showCourse(this, 'EN.600.415');">EN.600.415</a>, but not both. Recommended Course Background: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a><br />Instructor(s): D. Yarowsky
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.416.  Database Systems.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Similar material as <a href="/search/?P=EN.600.316" title="EN.600.316" class="bubblelink code" onclick="return showCourse(this, 'EN.600.316');">EN.600.316</a>, covered in more depth. Intended for upper-level undergraduates and graduate students. Students may receive credit for <a href="/search/?P=EN.600.316" title="EN.600.316" class="bubblelink code" onclick="return showCourse(this, 'EN.600.316');">EN.600.316</a> or <a href="/search/?P=EN.600.416" title="EN.600.416" class="bubblelink code" onclick="return showCourse(this, 'EN.600.416');">EN.600.416</a>, but not both. Recommended Course Background: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> and <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a><br /><strong>Prerequisites: Students may receive credit for <a href="/search/?P=EN.600.316" title="EN.600.316" class="bubblelink code" onclick="return showCourse(this, 'EN.600.316');">EN.600.316</a> or <a href="/search/?P=EN.600.416" title="EN.600.416" class="bubblelink code" onclick="return showCourse(this, 'EN.600.416');">EN.600.416</a>, but not both.</strong>
<br />Instructor(s): Y. Ahmad
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.418.  Operating Systems.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Similar material as <a href="/search/?P=EN.600.318" title="EN.600.318" class="bubblelink code" onclick="return showCourse(this, 'EN.600.318');">EN.600.318</a>, covered in more depth. Intended for upper-level undergraduates and graduate students. Students may receive credit for <a href="/search/?P=EN.600.318" title="EN.600.318" class="bubblelink code" onclick="return showCourse(this, 'EN.600.318');">EN.600.318</a> or <a href="/search/?P=EN.600.418" title="EN.600.418" class="bubblelink code" onclick="return showCourse(this, 'EN.600.418');">EN.600.418</a>, but not both.  [Systems]<br /><strong>Prerequisites: Students may receive credit for <a href="/search/?P=EN.600.318" title="EN.600.318" class="bubblelink code" onclick="return showCourse(this, 'EN.600.318');">EN.600.318</a> or <a href="/search/?P=EN.600.418" title="EN.600.418" class="bubblelink code" onclick="return showCourse(this, 'EN.600.418');">EN.600.418</a> but not both.</strong>
<br />Instructor(s): P. Froehlich
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.420.  Parallel Programming.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate level version of <a href="/search/?P=EN.600.320" title="EN.600.320" class="bubblelink code" onclick="return showCourse(this, 'EN.600.320');">EN.600.320</a>. Students may receive credit for <a href="/search/?P=EN.600.320" title="EN.600.320" class="bubblelink code" onclick="return showCourse(this, 'EN.600.320');">EN.600.320</a> or <a href="/search/?P=EN.600.420" title="EN.600.420" class="bubblelink code" onclick="return showCourse(this, 'EN.600.420');">EN.600.420</a>, but not both. Recommended Course Background: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> or equivalent.<br />Instructor(s): R. Burns
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.421.  Object Oriented Software Engineering.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate level version of <a href="/search/?P=EN.600.321" title="EN.600.321" class="bubblelink code" onclick="return showCourse(this, 'EN.600.321');">EN.600.321</a> [Systems or Applications]. Students may receive credit for <a href="/search/?P=EN.600.321" title="EN.600.321" class="bubblelink code" onclick="return showCourse(this, 'EN.600.321');">EN.600.321</a> or <a href="/search/?P=EN.600.421" title="EN.600.421" class="bubblelink code" onclick="return showCourse(this, 'EN.600.421');">EN.600.421</a>, but not both. Recommended Course Background: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a> and <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a><br />Instructor(s): S. Smith
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.423.  Data-Intensive Computing.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate student version of <a href="/search/?P=EN.600.323" title="EN.600.323" class="bubblelink code" onclick="return showCourse(this, 'EN.600.323');">EN.600.323</a>. [Systems] 
Students may receive credit for <a href="/search/?P=EN.600.323" title="EN.600.323" class="bubblelink code" onclick="return showCourse(this, 'EN.600.323');">EN.600.323</a> or <a href="/search/?P=EN.600.423" title="EN.600.423" class="bubblelink code" onclick="return showCourse(this, 'EN.600.423');">EN.600.423</a>, but not both.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.320" title="EN.600.320" class="bubblelink code" onclick="return showCourse(this, 'EN.600.320');">EN.600.320</a> OR <a href="/search/?P=EN.600.420" title="EN.600.420" class="bubblelink code" onclick="return showCourse(this, 'EN.600.420');">EN.600.420</a></strong>
<br />Instructor(s): R. Burns
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.424.  Network Security.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course focuses on communication security in computer systems and networks. The course is intended to provide students with an introduction to the field of network security. The course covers network security services such as authentication and access control, integrity and confidentiality of data, firewalls and related technologies, Web security and privacy. Course work involves implementing various security techniques. A course project is required. [Systems] Recommended. Course Background: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> (or equivalent)<br /><strong>Prerequisites: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a> AND ( <a href="/search/?P=EN.600.344" title="EN.600.344" class="bubblelink code" onclick="return showCourse(this, 'EN.600.344');">EN.600.344</a> OR <a href="/search/?P=EN.600.444" title="EN.600.444" class="bubblelink code" onclick="return showCourse(this, 'EN.600.444');">EN.600.444</a> ) or permission</strong>
<br />Instructor(s): S. Nielson
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.425.  Declarative Methods.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Students can only receive credit for <a href="/search/?P=EN.600.325" title="EN.600.325" class="bubblelink code" onclick="return showCourse(this, 'EN.600.325');">EN.600.325</a> or <a href="/search/?P=EN.600.425" title="EN.600.425" class="bubblelink code" onclick="return showCourse(this, 'EN.600.425');">EN.600.425</a>, not both. Graduate level version of <a href="/search/?P=EN.600.325" title="EN.600.325" class="bubblelink code" onclick="return showCourse(this, 'EN.600.325');">EN.600.325</a>. Recommended Course Background: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a>, <a href="/search/?P=EN.600.271" title="EN.600.271" class="bubblelink code" onclick="return showCourse(this, 'EN.600.271');">EN.600.271</a>, <a href="/search/?P=AS.110.107" title="AS.110.107" class="bubblelink code" onclick="return showCourse(this, 'AS.110.107');">AS.110.107</a>/<a href="/search/?P=AS.110.109" title="AS.110.109" class="bubblelink code" onclick="return showCourse(this, 'AS.110.109');">AS.110.109</a><br />Instructor(s): J. Eisner
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.426.  Principles of Programming Languages.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Functional, object-oriented, and other language features are studied independent of a particular programming language. Students become familiar with these features by implementing them. Most of the implementations are in the form of small language interpreters. Some type checkers and a small compiler will also be written. The total amount of code written will not be overly large, as the emphasis is on concepts. The ML programming language is the implementation language used. [Analysis] 
Requistes include 600.226. No Freshmen or Sophomores.<br />Instructor(s): S. Smith
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.428.  Compilers &amp; Interpreters.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Introduction to compiler design, including lexical analysis, parsing, syntax-directed translation, symbol tables, run-time environments, and code generation and optimization. Students are required to write a compiler as a course project. Co-listed with <a href="/search/?P=EN.600.328" title="EN.600.328" class="bubblelink code" onclick="return showCourse(this, 'EN.600.328');">EN.600.328</a>. Students should have knowledge of C/C++ programming and data structures. Graduate version of <a href="/search/?P=EN.600.328" title="EN.600.328" class="bubblelink code" onclick="return showCourse(this, 'EN.600.328');">EN.600.328</a>. Students may receive credit for <a href="/search/?P=EN.600.328" title="EN.600.328" class="bubblelink code" onclick="return showCourse(this, 'EN.600.328');">EN.600.328</a> or <a href="/search/?P=EN.600.428" title="EN.600.428" class="bubblelink code" onclick="return showCourse(this, 'EN.600.428');">EN.600.428</a>, but not both.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): P. Froehlich
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.429.  Functional Programming at Work - Haskell and Domain-Specific Languages.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course studies pure functional programming in the Haskell  language and the use of functional programming to build domain specific languages (DSLs): customized, application specific  programming languages.  This course starts with an introduction to Haskell and its essential ideas of lazy evaluation and type  inference.  Advanced functional programming topics will include type classes, monads and monad transformers, arrows, templates, dependent  types, parser combinators, and multiple parameter type classes.  The class will study existing DSLs and DSL implementation techniques,  including languages for reactive programming, computer vision, hardware design, computer music, and parallel processing.  Students  will implement a DSL of their choice in Haskell.<br />Instructor(s): J. Peterson
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.430.  Ontologies and Knowledge Representation.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Knowledge representation (KR) deals with the possible structures by which the content of what is known can be formally represented in such a way that queries can be posed and inferences drawn. Ontology concerns the hierarchi- cal classification of entities from given domains of knowledge together with the relations between various classes or subclasses. We begin with KR, examining the standard variety of frameworks developed or implemented over the last twenty years, including 1st-order logic and automated theorem proving, networks, frames, and description logics. Then we move on to a study of the problems inherent in ontology development and examine the some of the currently prevalent environments, including Universal Modeling Language, OWL and Protege', RDFS and semantic web applications. [Analysis]
Recommended Course Background: <a href="/search/?P=EN.600.107" title="EN.600.107" class="bubblelink code" onclick="return showCourse(this, 'EN.600.107');">EN.600.107</a><br />Instructor(s): R. Rynasiewicz
<br />Area: Humanities, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.433.  Computer Systems.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate version of 600.333. Students may receive credit for 600.333 or 600.433, but not both. [Systems]<br />Instructor(s): P. Froehlich
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.435.  Artificial Intelligence.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
The course situates the study of Artificial Intelligence (AI) first in the broader context of Philosophy of Mind and Cognitive Psychology and then treats in-depth methods for automated reasoning, automatic problem solvers and planners, knowledge representation mechanisms, game playing, machine learning, and statistical pattern recognition. The class is a recommended for all scientists and engineers with a genuine curiosity about the fundamental obstacles to getting machines to perform tasks such as deduction, learning, and planning and navigation. Strong programming skills and a good grasp of the English language are expected; students will be asked to complete both programming assignments and writing assignments. The course will include a brief introduction to scientific writing and experimental design, including assignments to apply these concepts. [Applications]
Prereq: 600.226; Recommended: linear algebra, prob/stat. Students can only receive credit for 600.335 or 600.435, not both.<br /><strong>Prerequisites: Have not taken <a href="/search/?P=EN.600.335" title="EN.600.335" class="bubblelink code" onclick="return showCourse(this, 'EN.600.335');">EN.600.335</a>;<a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): P. Koehn
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.436.  Algorithms for Sensor-Based Robotics.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course surveys the development of robotic systems for navigating in an environment from an algorithmic perspective. It will cover basic kinematics, configuration space concepts, motion planning, and localization and mapping. It will describe these concepts in the context of the ROS software system, and will present examples relevant to mobile platforms, manipulation, robotics surgery, and human-machine systems. [Analysis] Formerly EN.600.336.
Students may receive credit for only one of EN.600.336, <a href="/search/?P=EN.600.436" title="EN.600.436" class="bubblelink code" onclick="return showCourse(this, 'EN.600.436');">EN.600.436</a> and <a href="/search/?P=EN.600.636" title="EN.600.636" class="bubblelink code" onclick="return showCourse(this, 'EN.600.636');">EN.600.636</a>.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a> and Linear Algebra and Probability;Students may receive credit for only one of EN.600.336, <a href="/search/?P=EN.600.436" title="EN.600.436" class="bubblelink code" onclick="return showCourse(this, 'EN.600.436');">EN.600.436</a> and <a href="/search/?P=EN.600.636" title="EN.600.636" class="bubblelink code" onclick="return showCourse(this, 'EN.600.636');">EN.600.636</a>.</strong>
<br />Instructor(s): S. Leonard
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.437.  Distributed Systems.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate version of 600.337 Systems. Students may receive credit for 600.337 or 600.437 but not both. Recommended Course Background: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a>, <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a><br />Instructor(s): Y. Amir
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.438.  Computational Genomics: Data Analysis.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Genomic data has the potential to reveal causes of disease, novel drug targets, and relationships among genes and pathways in our cells. However, identifying meaningful patterns from high-dimensional genomic data has required development of new computational tools. This course will cover current approaches in computational analysis of genomic data with a focus on statistical methods and machine learning.Topics will include disease association, prediction tasks, clustering and dimensionality reduction, data integration, and network reconstruction. There will be some programming and a project component. [Applications]
Recommended Course Background: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a> or other programming experience, probability and statistics, linear algebra or calculus. 
Students may receive credit for <a href="/search/?P=EN.600.438" title="EN.600.438" class="bubblelink code" onclick="return showCourse(this, 'EN.600.438');">EN.600.438</a> or <a href="/search/?P=EN.600.638" title="EN.600.638" class="bubblelink code" onclick="return showCourse(this, 'EN.600.638');">EN.600.638</a>, but not both.<br /><strong>Prerequisites: Students may receive credit for <a href="/search/?P=EN.600.438" title="EN.600.438" class="bubblelink code" onclick="return showCourse(this, 'EN.600.438');">EN.600.438</a> or <a href="/search/?P=EN.600.638" title="EN.600.638" class="bubblelink code" onclick="return showCourse(this, 'EN.600.638');">EN.600.638</a>, but not both.]</strong>
<br />Instructor(s): A. Battle
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.439.  Computational Genomics.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Your genome is the blueprint for the molecules in your body. It's also a string of letters (A, C, G and T) about 3 billion letters long. How does this string give rise to you? Your heart, your brain, your health? This, broadly speaking, is what genomics research is about. This course will familiarize you with a breadth of topics from the field of computational genomics. The emphasis is on current research problems, real-world genomics data, and efficient software implementations for analyzing data. Topics will include: string matching, sequence alignment and indexing, assembly, and sequence models. Course will involve significant programming projects. [Applications]<br /><strong>Prerequisites: Students may receive credit for 600.439 or 600.639, but not both.;Prerequisite: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): B. Langmead
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.441.  Machine Learning for Genomic Data - Trends and Applications.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Genomic data is becoming available in large quantities, but understanding how genetics contributes to human disease and other traits remains a major challenge.  Machine learning approaches allow us to automatically analyze and combine genomic data, build predictive models, and identify genetic elements important to disease and cellular processes.  This course will cover uses of machine learning in diverse genomic applications.  Students will present and discuss current literature. Topics include predicting disease risk from genomic data, integrating diverse genomic data types, gene network reconstruction, and other topics guided by student interest.  The course will include a project component with the opportunity to explore publicly available genomic data.  Recommended course background: coursework in data mining, machine learning.  [Applications] Students may receive credit for 600.441 or 600.641, but not both.<br /><strong>Prerequisites: Students may receive credit for 600.441 or 600.641, but not both.</strong>
<br />Instructor(s): A. Battle
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.442.  Modern Cryptography.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Modern Cryptography includes seemingly paradoxical notions such as communicating privately without a shared secret, proving things without leaking knowledge, and computing on encrypted data. In this challenging but rewarding course we will start from the basics of private and public key cryptography and go all the way up to advanced notions such as zero-knowledge proofs, functional encryption and program obfuscation. The class will focus on rigorous proofs and require mathematical maturity. [Analysis]  
Recommended Course Background: <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a>/463, <a href="/search/?P=EN.600.271" title="EN.600.271" class="bubblelink code" onclick="return showCourse(this, 'EN.600.271');">EN.600.271</a>/471 and <a href="/search/?P=EN.550.171" title="EN.550.171" class="bubblelink code" onclick="return showCourse(this, 'EN.550.171');">EN.550.171</a> or equiv.<br />Instructor(s): A. Jain
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.443.  Security &amp; Privacy in Computing.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Lecture topics will include computer security, network security, basic cryptography, system design methodology, and privacy. There will be a heavy work load, including written homework, programming assignments, exams and a comprehensive final. The class will also include a semester-long project that will be done in teams and will include a presentation by each group to the class. [Applications] Recommended Course Background: A basic course in operating systems and networking, or permission of instructor.<br />Instructor(s): A. Rubin
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.444.  Computer Networks.  4.00 Credits.</strong></p>
<p class="courseblockdesc">
This course considers intersystem communications issues. Topics covered include layered network architectures; the OSI model; bandwidth, data rates, modems, multiplexing, error detection/correction; switching; queuing models, circuit switching, packet switching; performance analysis of protocols, local area networks; and congestion control. Recommended Course Background: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> and <a href="/search/?P=EN.600.233" title="EN.600.233" class="bubblelink code" onclick="return showCourse(this, 'EN.600.233');">EN.600.233</a>. Students can only receive credit for <a href="/search/?P=EN.600.344" title="EN.600.344" class="bubblelink code" onclick="return showCourse(this, 'EN.600.344');">EN.600.344</a> or <a href="/search/?P=EN.600.444" title="EN.600.444" class="bubblelink code" onclick="return showCourse(this, 'EN.600.444');">EN.600.444</a>, not both.<br /><strong>Prerequisites: Students can only receive credit for <a href="/search/?P=EN.600.344" title="EN.600.344" class="bubblelink code" onclick="return showCourse(this, 'EN.600.344');">EN.600.344</a> or <a href="/search/?P=EN.600.444" title="EN.600.444" class="bubblelink code" onclick="return showCourse(this, 'EN.600.444');">EN.600.444</a>, not both.</strong>
<br />Instructor(s): M. Green
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.445.  Computer Integrated Surgery I.  4.00 Credits.</strong></p>
<p class="courseblockdesc">
This course focuses on computer-based techniques, systems, and applications exploiting quantitative information from medical images and sensors to assist clinicians in all phases of treatment from diagnosis to preoperative planning, execution, and follow-up. It emphasizes the relationship between problem definition, computer-based technology, and clinical application and includes a number of guest lectures given by surgeons and other experts on requirements and opportunities in particular clinical areas. Required Course Background: <a href="/search/?P=AS.110.201" title="AS.110.201" class="bubblelink code" onclick="return showCourse(this, 'AS.110.201');">AS.110.201</a> or permission of instructor.
Recommended Course Background: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a>, <a href="/search/?P=EN.600.457" title="EN.600.457" class="bubblelink code" onclick="return showCourse(this, 'EN.600.457');">EN.600.457</a>, <a href="/search/?P=EN.600.461" title="EN.600.461" class="bubblelink code" onclick="return showCourse(this, 'EN.600.461');">EN.600.461</a>, image processing.<br /><strong>Prerequisites: Students may receive credit for 600.445 or 600.645, but not both.;<a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): R. Taylor
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.446.  Computer Integrated Surgery II.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This weekly lecture/seminar course addresses similar material to <a href="/search/?P=EN.600.445" title="EN.600.445" class="bubblelink code" onclick="return showCourse(this, 'EN.600.445');">EN.600.445</a>, but covers selected topics in greater depth. In addition to material covered in lectures/seminars by the instructor and other faculty, students are expected to read and provide critical analysis/presentations of selected papers in recitation sessions. Students taking this course are required to undertake and report on a significant term project under the supervision of the instructor and clinical end users. Typically, this project is an extension of the term project from <a href="/search/?P=EN.600.445" title="EN.600.445" class="bubblelink code" onclick="return showCourse(this, 'EN.600.445');">EN.600.445</a>, although it does not have to be. Grades are based both on the project and on classroom recitations. Students wishing to attend the weekly lectures as a 1-credit seminar should sign up for <a href="/search/?P=EN.600.452" title="EN.600.452" class="bubblelink code" onclick="return showCourse(this, 'EN.600.452');">EN.600.452</a>. Students may also take this course as <a href="/search/?P=EN.600.646" title="EN.600.646" class="bubblelink code" onclick="return showCourse(this, 'EN.600.646');">EN.600.646</a>. The only difference between <a href="/search/?P=EN.600.446" title="EN.600.446" class="bubblelink code" onclick="return showCourse(this, 'EN.600.446');">EN.600.446</a> and <a href="/search/?P=EN.600.646" title="EN.600.646" class="bubblelink code" onclick="return showCourse(this, 'EN.600.646');">EN.600.646</a> is the level of project undertaken. Typically, <a href="/search/?P=EN.600.646" title="EN.600.646" class="bubblelink code" onclick="return showCourse(this, 'EN.600.646');">EN.600.646</a> projects require a greater degree of mathematical, image processing, or modeling background. Prospective students should consult with the instructor as to which course number is appropriate. [Applications]
Students may receive credit for <a href="/search/?P=EN.600.446" title="EN.600.446" class="bubblelink code" onclick="return showCourse(this, 'EN.600.446');">EN.600.446</a> or <a href="/search/?P=EN.600.646" title="EN.600.646" class="bubblelink code" onclick="return showCourse(this, 'EN.600.646');">EN.600.646</a>, but not both.<br /><strong>Prerequisites: Prereq for <a href="/search/?P=EN.600.446" title="EN.600.446" class="bubblelink code" onclick="return showCourse(this, 'EN.600.446');">EN.600.446</a>: <a href="/search/?P=EN.600.445" title="EN.600.445" class="bubblelink code" onclick="return showCourse(this, 'EN.600.445');">EN.600.445</a> or <a href="/search/?P=EN.600.645" title="EN.600.645" class="bubblelink code" onclick="return showCourse(this, 'EN.600.645');">EN.600.645</a> or permisssion</strong>
<br />Instructor(s): R. Taylor
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.450.  Network Embedded Systems &amp; Sensor Networks.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course is an introduction to fundamental concepts of networked embedded systems and wireless sensor networks. It is intended for juniors, seniors and first year graduate students in Computer Science and other engineering majors with the prerequisite background. Covered topics include: embedded systems programming concepts, low power and power aware design, radio technologies, communication protocols for ubiquitous computing systems, and some of the mathematical foundation of sensor behavior. Laboratory work consists of a set of programming assignments that consider a set of the issues described in class. Recommended Course Background: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a>, <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a>, and <a href="/search/?P=EN.600.344" title="EN.600.344" class="bubblelink code" onclick="return showCourse(this, 'EN.600.344');">EN.600.344</a>/<a href="/search/?P=EN.600.444" title="EN.600.444" class="bubblelink code" onclick="return showCourse(this, 'EN.600.444');">EN.600.444</a><br />Instructor(s): M. Chang
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.451.  Introduction to Bitcoin and Other Crypto-currencies.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course covers the basics of Bitcoin and the underlying technologies driving it. The course is intended for students interested in the cryptographic techniques devised to make digital currencies and payment systems secure. Topics include Bitcoin transactions, the blockchain, mining, and decentralized consensus. The course will include a brief introduction to public-key cryptography, digital signatures, hash functions, proof of work/space, multisignatures, and elliptic curve cryptography. The course concludes with an overview of the Bitcoin scripting language and Bitcoin 2.0 platforms. [Systems]
Recommended Course Background: <a href="/search/?P=EN.600.344" title="EN.600.344" class="bubblelink code" onclick="return showCourse(this, 'EN.600.344');">EN.600.344</a>/444 (Computer Networks) and <a href="/search/?P=EN.550.171" title="EN.550.171" class="bubblelink code" onclick="return showCourse(this, 'EN.550.171');">EN.550.171</a> (Discrete Math)<br /><strong>Prerequisites: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): G. Ateniese
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.452.  Seminar: Computer Integrated Surgery II.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Students may receive credit for <a href="/search/?P=EN.600.446" title="EN.600.446" class="bubblelink code" onclick="return showCourse(this, 'EN.600.446');">EN.600.446</a> or <a href="/search/?P=EN.600.452" title="EN.600.452" class="bubblelink code" onclick="return showCourse(this, 'EN.600.452');">EN.600.452</a>, but not both. Lecture only version of <a href="/search/?P=EN.600.446" title="EN.600.446" class="bubblelink code" onclick="return showCourse(this, 'EN.600.446');">EN.600.446</a> (no project). Recommended Course Background: <a href="/search/?P=EN.600.445" title="EN.600.445" class="bubblelink code" onclick="return showCourse(this, 'EN.600.445');">EN.600.445</a> or instructor permission required.<br />Instructor(s): R. Taylor
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.454.  Practical Cryptographic Systems.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This semester-long course will teach systems and cryptographic design principles by example: by stud-ying and identifying flaws in widely-deployed cryptographic products and protocols. Our focus will be on the techniques used in practical security systems, the mistakes that lead to failure, and the approaches that might have avoided the problem. 
We will place a particular emphasis on the techniques of provable security and the feasibility of reverse-engineering undocumented cryptographic systems.  [Systems]<br />Instructor(s): M. Green
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.457.  Computer Graphics.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course introduces computer graphics techniques and applications, including image processing, rendering, modeling and animation. [Applications] 
Permission of instructor is required for students not satisfying a pre-requisite. Students may receive credit for <a href="/search/?P=EN.600.357" title="EN.600.357" class="bubblelink code" onclick="return showCourse(this, 'EN.600.357');">EN.600.357</a> or <a href="/search/?P=EN.600.457" title="EN.600.457" class="bubblelink code" onclick="return showCourse(this, 'EN.600.457');">EN.600.457</a>, but not both.<br /><strong>Prerequisites: Students may receive credit for <a href="/search/?P=EN.600.357" title="EN.600.357" class="bubblelink code" onclick="return showCourse(this, 'EN.600.357');">EN.600.357</a> or <a href="/search/?P=EN.600.457" title="EN.600.457" class="bubblelink code" onclick="return showCourse(this, 'EN.600.457');">EN.600.457</a>, but not both.;<a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a></strong>
<br />Instructor(s): M. Kazhdan
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.459.  Computational Geometry.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will provide an introduction to computational geometry. It will cover a number of topics in two- and three-dimensions, including polygon triangulations and partitions, convex hulls, Delaunay and Voronoi diagrams, arrangements, and spatial queries. Time-permitting, we will also look at kD-trees, general BSP-trees, and quadtrees. [Analysis]
Recommended Course Background: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a> AND (<a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a> OR <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a>).<br /><strong>Prerequisites: Students may receive credit for <a href="/search/?P=EN.600.459" title="EN.600.459" class="bubblelink code" onclick="return showCourse(this, 'EN.600.459');">EN.600.459</a> or <a href="/search/?P=EN.600.659" title="EN.600.659" class="bubblelink code" onclick="return showCourse(this, 'EN.600.659');">EN.600.659</a>, but not both.&#x0D;</strong>
<br />Instructor(s): M. Kazhdan
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.460.  Software Vulnerability Analysis.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will examine vulnerabilities in C source, stack overflows, writing shell code, etc.  Also, vulnerabilities in web applications:  SQL Injection, cookies, as well as vulnerabilities in C binary fuzzing, and exploit development without source among other topics.
Co-listed with <a href="/search/?P=EN.650.460" title="EN.650.460" class="bubblelink code" onclick="return showCourse(this, 'EN.650.460');">EN.650.460</a><br />Instructor(s): S. Checkoway
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.461.  Computer Vision.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course gives an overview of fundamental methods in computer vision from a computational perspective. Methods studied include: camera systems and their modelling, computation of 3-D geometry from binocular stereo, motion, and photometric stereo; and object recognition. Edge detection and color perception are covered as well.  Elements of machine vision and biological vision are also included.   Students may receive credit for at most one of EN.600.361 or <a href="/search/?P=EN.600.461" title="EN.600.461" class="bubblelink code" onclick="return showCourse(this, 'EN.600.461');">EN.600.461</a> or <a href="/search/?P=EN.600.661" title="EN.600.661" class="bubblelink code" onclick="return showCourse(this, 'EN.600.661');">EN.600.661</a>. [Applications]  Prerequisites (soft): intro programming, linear algebra, and prob/stat.<br /><strong>Prerequisites: If you have completed EN.600.361 OR <a href="/search/?P=EN.600.661" title="EN.600.661" class="bubblelink code" onclick="return showCourse(this, 'EN.600.661');">EN.600.661</a> you cannot enroll in <a href="/search/?P=EN.600.461" title="EN.600.461" class="bubblelink code" onclick="return showCourse(this, 'EN.600.461');">EN.600.461</a>.</strong>
<br />Instructor(s): A. Reiter
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.463.  Algorithms I.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course concentrates on the design of algorithms and the rigorous analysis of their efficiency. topics include the basic definitions of algorithmic complexity (worst case, average case); basic tools such as dynamic programming, sorting, searching, and selection; advanced data structures and their applications (such as union-find); graph algorithms and searching techniques such as minimum spanning trees, depth-first search, shortest paths, design of online algorithms and competitive analysis. [Analysis] Students may receive credit for <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a> or <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a>, but not both.<br />Instructor(s): V. Braverman
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.464.  Randomized and Big Data Algorithms.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
The course emphasizes algorithmic design aspects, and how randomization can be a helpful tool.  The topics covered include: tail inequalities, linear programming relaxation &amp; randomized rounding, de-randomization, existence proofs, universal hashing, markov chains, metropolis and metropolis-hastings methods, mixing by coupling and by eigenvalues, counting problems, semi-definite programming and rounding, lower bound arguments, and applications of expanders.  [Analysis] (www.cs.jhu.edu/~cs464) Recommended Course Background: <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a> or <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a>.<br /><strong>Prerequisites: Students may receive credit for 600.464 or 600.664, but not both.</strong>
<br />Instructor(s): V. Braverman
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.465.  Natural Language Processing.  4.00 Credits.</strong></p>
<p class="courseblockdesc">
This course is an in-depth overview of techniques for processing human language. How should linguistic structure and meaning be represented? What algorithms can recover them from text? And crucially, how can we build statistical models to choose among the many legal answers? The course covers methods for trees (parsing and semantic interpretation), sequences (finite-state transduction such as morphology), and words (sense and phrase induction), with applications to practical engineering tasks such as information retrieval and extraction, text classification, part-of-speech tagging, speech recognition and machine translation. There are a number of structured but challenging programming assignments. [Applications] Recommended Course Background: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a><br />Instructor(s): J. Eisner
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.466.  Information Retrieval and Web Agents.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
An in-depth, hands-on study of current information retrieval techniques and their application to developing intelligent WWW agents. Topics include a comprehensive study of current document retrieval models, mail/news routing and filtering, document clustering, automatic indexing, query expansion, relevance feedback, user modeling, information visualization and usage pattern analysis. In addition, the course explores the range of additional language processing steps useful for template filling and information extraction from retrieved documents, focusing on recent, primarily statistical methods. The course concludes with a study of current issues in information retrieval and data mining on the World Wide Web. Topics include web robots, spiders, agents and search engines, exploring both their practical implementation and the economic and legal issues surrounding their use. Recommended Course Background: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a><br />Instructor(s): D. Yarowsky
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.468.  Machine Translation.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Google translate can instantly translate between any pair of over fifty human languages (for instance, from French to English). How does it do that? Why does it make the errors that it does? And how can you build something better? Modern translation systems learn to translate by reading millions of words of already translated text, and this course will show you how they work. The course covers a diverse set of fundamental building blocks from linguistics, machine learning, algorithms, data structures, and formal language theory, along with their application to a real and difficult problem in artificial intelligence. Recommended Course Background: prob/stat, <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a>; <a href="/search/?P=EN.600.465" title="EN.600.465" class="bubblelink code" onclick="return showCourse(this, 'EN.600.465');">EN.600.465</a><br />Instructor(s): P. Koehn
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.469.  Approximation Algorithms.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course provides an introduction to approximation  algorithms. Topics include vertex cover, TSP, Steiner trees, cuts, greedy approach, linear and semi-definite programming, primal-dual method, and randomization.   Additional topics will be covered as time permits.  There will be a final project.  Students may receive credit for <a href="/search/?P=EN.600.469" title="EN.600.469" class="bubblelink code" onclick="return showCourse(this, 'EN.600.469');">EN.600.469</a> or <a href="/search/?P=EN.600.669" title="EN.600.669" class="bubblelink code" onclick="return showCourse(this, 'EN.600.669');">EN.600.669</a>, but not both.  [Analysis]<br />Instructor(s): M. Dinitz
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.470.  Combinatorics &amp; Graph Theory in Computer Science.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This is a graduate level course studying the applications of combinatorics and graph theory in computer science. We will start with some basic combinatorial techniques such as counting and pigeon hole principle, and then move to advanced techniques such as the probabilistic method, spectral graph theory and additive combinatorics. We shall see their applications in various areas in
computer science, such as proving lower bounds in computational models, randomized algorithms, coding theory and pseudorandomness. [Analysis]
Recommended Course Background: probability theory and linear algebra<br /><strong>Prerequisites: <a href="/search/?P=EN.550.171" title="EN.550.171" class="bubblelink code" onclick="return showCourse(this, 'EN.550.171');">EN.550.171</a></strong>
<br />Instructor(s): X. Li
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.471.  Theory of Computation.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This is a graduate-level course studying the theoretical foundations of computer science. Topics covered will be models of computation from automata to Turing machines, computability, complexity theory, randomized algorithms, inapproximability, interactive proof systems and probabilistically checkable proofs. Students may not take both <a href="/search/?P=EN.600.271" title="EN.600.271" class="bubblelink code" onclick="return showCourse(this, 'EN.600.271');">EN.600.271</a> and <a href="/search/?P=EN.600.471" title="EN.600.471" class="bubblelink code" onclick="return showCourse(this, 'EN.600.471');">EN.600.471</a>, unless one is for an undergrad degree and the other for grad. [Analysis]Recommended Course Background: <a href="/search/?P=EN.550.171" title="EN.550.171" class="bubblelink code" onclick="return showCourse(this, 'EN.550.171');">EN.550.171</a> or istructor permission.<br />Instructor(s): X. Li
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.473.  Algorithmic Game Theory.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course provides an introduction to algorithmic game theory: the study of games from the perspective of algorithms and theoretical computer science. There will be a particular focus on games that arise naturally from economic interactions involving computer systems (such as economic interactions between large-scale networks, online advertising markets, etc.), but there will also be broad coverage of games and mechanisms of all sorts. Topics covered will include a) complexity of computing equilibria and algorithms for doing so, b) (in)efficiency of equilibria, and c) algorithmic mechanism design. [Analysis]
Students may receive credit for <a href="/search/?P=EN.600.473" title="EN.600.473" class="bubblelink code" onclick="return showCourse(this, 'EN.600.473');">EN.600.473</a> or EN.600.673, but not both.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a> OR <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a> OR permission.;Students may receive credit for <a href="/search/?P=EN.600.473" title="EN.600.473" class="bubblelink code" onclick="return showCourse(this, 'EN.600.473');">EN.600.473</a> or EN.600.673, but not both.</strong>
<br />Instructor(s): M. Dinitz
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.475.  Machine Learning.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Machine learning is subfield of computer science and artificial intelligence, whose goal is to develop computational systems, methods, and algorithms that can learn from data to improve their performance. This course introduces the foundational concepts of modern Machine Learning, including core principles, popular algorithms and modeling platforms. This will include both supervised learning, which includes popular algorithms like SVMs, logistic regression, boosting and deep learning, as well as unsupervised learning frameworks, which include Expectation Maximization and graphical models. Homework assignments include a heavy programming components, requiring students to implement several machine learning algorithms in a common learning framework. Additionally, analytical homework questions will explore various machine learning concepts, building on the pre-requisites that include probability, linear algebra, multi-variate calculus and basic optimization. Students in the course will develop a learning system for a final project.  [Analysis or Applications]<br />Instructor(s): R. Arora
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.476.  Machine Learning: Data to Models.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
How can robots localize themselves in an environment when navigating? Can we predict which patients are at greatest-risk for complications in the hospital? Which movie should I recommend to this user given his history of likes? Many such big data questions can be answered using the paradigm of probabilistic models in machine learning. These are especially useful when common off-the-shelf algorithms such as support vector machines and k-means fail. You will learn methods for clustering, classification, structured prediction, recommendation and inference. We will use Murphy's book, Machine Learning: a Probabilistic Perspective, as the text for this course. Assignments are solved in groups of size 1-3 students. The class will have 4 interactive sessions during which we brainstorm how to solve example open-ended real-world problems with the tools learnt in class. Students are also required to do a project of their choice within which they experiment with the ideas learnt in class. [Analysis or Applications] Students may receive credit for <a href="/search/?P=EN.600.476" title="EN.600.476" class="bubblelink code" onclick="return showCourse(this, 'EN.600.476');">EN.600.476</a> or <a href="/search/?P=EN.600.676" title="EN.600.676" class="bubblelink code" onclick="return showCourse(this, 'EN.600.676');">EN.600.676</a>, but not both.
Requistes include Intro Prob/Stat, Linear Algebra and Intro Machine Learning as well as strong background in s.<br />Instructor(s): S. Saria
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.477.  Causal Inference.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Big data is not necessarily high quality data.  Systematically missing records, unobserved confounders, and selection effects present in many datasets make it harder than ever to answer scientifically meaningful questions.  This course will teach mathematical tools to help you reason about causes, effects, and bias sources in data with confidence.  We will use graphical causal models, and potential outcomes to formalize what causal effects mean, describe how to express these effects as functions of observed data, and use regression model techniques to estimate them.  We will consider techniques for handling missing values, structure learning algorithms for inferring causal directionality from data, and connections between causal inference and reinforcement learning.  [Analysis]  Pre-requisites: familiarity with the R programming language, multivariate calculus, basics of linear algebra and probability.  Students may receive credit for <a href="/search/?P=EN.600.477" title="EN.600.477" class="bubblelink code" onclick="return showCourse(this, 'EN.600.477');">EN.600.477</a> or <a href="/search/?P=EN.600.677" title="EN.600.677" class="bubblelink code" onclick="return showCourse(this, 'EN.600.677');">EN.600.677</a>, but not both.<br /><strong>Prerequisites: Students may receive credit for <a href="/search/?P=EN.600.477" title="EN.600.477" class="bubblelink code" onclick="return showCourse(this, 'EN.600.477');">EN.600.477</a> or <a href="/search/?P=EN.600.677" title="EN.600.677" class="bubblelink code" onclick="return showCourse(this, 'EN.600.677');">EN.600.677</a>, but not both.</strong>
<br />Instructor(s): I. Shpitser
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.479.  Representation Learning.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Often the success of a machine learning project depends on the choice of features used.  Machine learning has made great progress in training classification, regression and recognition systems when good representations, or features, of input data are available. However, much human effort is spent on designing good features which are usually knowledge-based and engineered by domain experts over years of trial and error. A natural question to ask then is Can we automate the learning of useful features from raw data? Representation learning algorithms such as principal component analysis aim at discovering better representations of inputs by learning transformations of data that disentangle factors of variation in data while retaining most of the information. The success of such data-driven approaches to feature learning depends not only on how much data we can process but also on how well the features that we learn correlate with the underlying unknown labels (semantic content in the data). This course will focus on scalable machine learning approaches for learning representations from large amounts of unlabeled, multi-modal, and heterogeneous data. We will cover topics including deep learning, multi-view learning, dimensionality reduction, similarity-based learning, and spectral learning.  Students may receive credit for 600.479 or 600.679 but not both.  [Analysis or Applications] Required course background: machine learning or basic probability and linear algebra.<br /><strong>Prerequisites: If you have completed <a href="/search/?P=EN.600.679" title="EN.600.679" class="bubblelink code" onclick="return showCourse(this, 'EN.600.679');">EN.600.679</a> you may not enroll in <a href="/search/?P=EN.600.479" title="EN.600.479" class="bubblelink code" onclick="return showCourse(this, 'EN.600.479');">EN.600.479</a>.</strong>
<br />Instructor(s): R. Arora
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.484.  Augmented Reality.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Undergraduate level version of <a href="/search/?P=EN.600.684" title="EN.600.684" class="bubblelink code" onclick="return showCourse(this, 'EN.600.684');">EN.600.684</a>.  Students may take EN.600.384 
or <a href="/search/?P=EN.600.684" title="EN.600.684" class="bubblelink code" onclick="return showCourse(this, 'EN.600.684');">EN.600.684</a>, but not both.<br /><strong>Prerequisites: Prereqs: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> AND <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a> AND (<a href="/search/?P=AS.110.201" title="AS.110.201" class="bubblelink code" onclick="return showCourse(this, 'AS.110.201');">AS.110.201</a> OR <a href="/search/?P=EN.550.291" title="EN.550.291" class="bubblelink code" onclick="return showCourse(this, 'EN.550.291');">EN.550.291</a>)</strong>
<br />Instructor(s): N. Navab
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.485.  Probabilistic Models of the Visual Cortex.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
The course gives an introduction to computational models of the mammalian visual cortex. It covers topics in low-, mid-, and high-level vision. It briefly discusses the relevant evidence from anatomy, electrophysiology, imaging (e.g., fMRI), and psychophysics. It concentrates on mathematical modelling of these phenomena taking into account recent progress in probabilistic models of computer vision and developments in machine learning, such as deep networks.  [Applications or Analysis]. Recommended Course Background: <a href="/search/?P=AS.110.106" title="AS.110.106" class="bubblelink code" onclick="return showCourse(this, 'AS.110.106');">AS.110.106</a> or <a href="/search/?P=AS.110.108" title="AS.110.108" class="bubblelink code" onclick="return showCourse(this, 'AS.110.108');">AS.110.108</a>;  Programming experience (Python preferred).<br />Instructor(s): A. Yuille
<br />Area: Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.488.  Foundations of Computational Biology &amp; Bioinformatics II.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will introduce probabilistic modeling and information theory applied to biological sequence analysis, focusing on statistical models of protein families, alignment algorithms, and models of evolution. Topics will include probability theory, score matrices, hidden Markov models, maximum likelihood, expectation maximization and dynamic programming algorithms. Homework assignments will require programming in Python. Foundations of Computational Biology I is not a prereq. [Analysis] 
Co-listed with <a href="/search/?P=EN.580.488" title="EN.580.488" class="bubblelink code" onclick="return showCourse(this, 'EN.580.488');">EN.580.488</a>. Recommended Course Background: math through linear algebra and differential equations, at least one prob/stat course, <a href="/search/?P=EN.580.221" title="EN.580.221" class="bubblelink code" onclick="return showCourse(this, 'EN.580.221');">EN.580.221</a> or equivalent, <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a> or equivalent.<br />Instructor(s): R. Karchin
<br />Area: Engineering, Natural Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.503.  Independent Study.  1.00 - 3.00 Credit.</strong></p>
<p class="courseblockdesc">
Individual guided study for undergraduate students under the direction of a faculty member in the department. The program of study, including the credit to be assigned, must be worked out in advance between the student and the faculty member involved. Permission required.<br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.504.  Undergraduate Independent Study.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
For undergraduate students. Permission of faculty sponsor is required.<br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.507.  Undergraduate Research.  1.00 - 3.00 Credit.</strong></p>
<p class="courseblockdesc">
Individual research for undergraduates under the direction of a faculty member in the department. The program of research, including the credit to be assigned, must be worked out in advance between the student and the faculty member involved. Permission required.<br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.508.  Undergraduate Research.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Permission of faculty sponsor is required.<br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.509.  Computer Science Internship.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Individual work in the field with a learning component, supervised by a faculty member in the department. The program of study and credit assigned must be worked out in advance between the student and the faculty member involved. Students may not receive credit for work that they are paid to do. As a rule of thumb, 40 hours of work is equivalent to one credit. Permission required.<br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.510.  Computer Science Internship.  0.00 - 4.00 Credit.</strong></p>
<p class="courseblockdesc">
Individual work in the field with a learning component, supervised by a faculty member in the department. The program of study must be worked out in advance between the student and the faculty member involved. Students may not receive credit for work that they are paid to do. As a rule of thumb, 40 hours of work is equivalent to one credit, which is the limit per semester. Permission of faculty sponsor is required.<br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.517.  Group Undergraduate Research.  1.00 - 3.00 Credit.</strong></p>
<p class="courseblockdesc">
Independent research for undergraduates under the direction of a faculty member in the department. This course has a weekly research group meeting that students are expected to attend. The program of research, including the credit to be assigned, must be worked out in advance between the student and the faculty member involved.<br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.519.  Senior Honors Thesis.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
The student will undertake a substantial independent research project under the supervision of a faculty member, potentially leading to the notation Departmental Honors with Thesis on the final transcript. Students are expected to enroll in both semesters of this course during their senior year. Project proposals must be submitted and accepted in the preceding spring semester (junior year) before registration. Students will present their work publicly before April 1st of senior year. They will also submit a first draft of their project report (thesis document) at that time. Faculty will meet to decide if the thesis will be accepted for honors. Computer science majors only. Students should have a 3.5 GPA in computer science courses at the end of their junior year and permission of faculty sponsor. See EN.600.491 for faculty section numbers<br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.520.  Senior Honors Thesis.  0.00 - 3.00 Credit.</strong></p>
<p class="courseblockdesc">
For computer science majors only, a continuation of <a href="/search/?P=EN.600.519" title="EN.600.519" class="bubblelink code" onclick="return showCourse(this, 'EN.600.519');">EN.600.519</a>. Recommended Course Background: <a href="/search/?P=EN.600.519" title="EN.600.519" class="bubblelink code" onclick="return showCourse(this, 'EN.600.519');">EN.600.519</a><br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.546.  Senior Thesis in CIS.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
<strong>Prerequisites: <a href="/search/?P=EN.600.445" title="EN.600.445" class="bubblelink code" onclick="return showCourse(this, 'EN.600.445');">EN.600.445</a> or perm req'd.</strong>
<br />Instructor(s): R. Taylor.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.591.  Computer Science Workshop I.  1.00 - 3.00 Credit.</strong></p>
<p class="courseblockdesc">
An applications-oriented, computer science project done under the supervision and with the sponsorship of a faculty member in the Department of Computer Science. Computer Science Workshop provides a student with an opportunity to apply theory and concepts of computer science to a significant project of mutual interest to the student and a Computer Science faculty member. Permission to enroll in CSW is granted by the faculty sponsor after his/her approval of a project proposal from the student. Interested students are advised to consult with Computer Science faculty members before preparing a Computer Science Workshop project proposal.<br />Instructor(s): D. Yarowsky; J. Selinski; P. Froehlich; S. Smith.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.592.  Computer Science Workshop II.  </strong></p>
<p class="courseblockdesc">
Permission of faculty sponsor is required.<br />Instructor(s): D. Yarowsky; J. Selinski; P. Froehlich; S. Smith.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.595.  Independent Study-Summer.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.597.  Research-Summer.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.599.  Internship.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.601.  Computer Science Seminar.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Required for all full-time CS PhD students. Recommended for MSE students.<br />Instructor(s): S. Smith.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.602.  Computer Science Seminar.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Required for all CS PhD students. Strongly recommended for MSE students.<br />Instructor(s): S. Smith.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.615.  Big Data, Small Languages, Scalable Systems.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This class will study domain-specific data management tools, focusing on extremely scalable system design based on the domain's semantic and structural properties. We will study a variety of data models including stream, graph, array and probabilistic data, and their processing on modern architectures such as column- and key-value stores, stream and XQuery engines. Further topics include the use of novel hardware such as solid state disks, phase change memory, GPUs, and FPGAs. The class includes a semester long group project to develop a query processor for an application of the group's choice (e.g. on system log, finance, web, sensor, speech data). Recommended Course Background: <a href="/search/?P=EN.600.315" title="EN.600.315" class="bubblelink code" onclick="return showCourse(this, 'EN.600.315');">EN.600.315</a>/<a href="/search/?P=EN.600.415" title="EN.600.415" class="bubblelink code" onclick="return showCourse(this, 'EN.600.415');">EN.600.415</a> or equivalent.<br />Instructor(s): Y. Ahmad.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.624.  Advanced Topics in Data-Intensive Computing.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
The advent of cloud computing has lead to an explosion of storage system and data analysis software, including NoSQL databases, bulk-synchronous processing, graph computing engines, and stream processing.  This course will explore scale-out software architectures
for data-processing tasks.  It will examine the algorithms and data-structures that underlie scalable systems and look at how hardware and networking trends influence the design and deployment of cloud computing.  Recommended Course Background: <a href="/search/?P=EN.600.320" title="EN.600.320" class="bubblelink code" onclick="return showCourse(this, 'EN.600.320');">EN.600.320</a>/420 or
permission of instructor.  [Systems]<br />Instructor(s): R. Burns.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.625.  Events Semantics in Theory and Practice.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course explores selected topics in the nature of event representations from the perspective of cognitive science, computer science, linguistics, and philosophy.  These fields have developed a rich array of scientific theories about the representation of events, and how humans make inferences about them -- we investigate how (and if) such theories could be applied to current research topics and tasks in computational semantics such as inference from text, automated summarization, veridicality assessment, and so on.  In addition to classic articles dealing with formal semantic theories, the course considers available machine-readable corpora, ontologies, and related resources that bear on event structure, such as WordNet, PropBank, FrameNet, etc..  The course is aimed to marry theory with practice: students with either a computational or linguistic background are encouraged to participate.  [Applications]<br />Instructor(s): B. Van Durme; K. Rawlins.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.629.  Wireless Networks.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course covers the basics of mobile communication and wireless networking for computer science majors by keeping a balance between communication and networking topics. In this course, the students will be exposed to wireless transmission fundamentals (path loss,shadowing, modulation, coding and channel models), and learn about medium access control protocols, wireless local area networks (IEEE 802.11), and wireless mobile networks and applications, including cellular networks (cellular concept, channel reuse, capacity limits, and cellular systems), fourth generation systems, long term evolution (LTE), mobile applications, and mobile IP. [Systems] Recommended Course Background: <a href="/search/?P=EN.600.344" title="EN.600.344" class="bubblelink code" onclick="return showCourse(this, 'EN.600.344');">EN.600.344</a>/<a href="/search/?P=EN.600.444" title="EN.600.444" class="bubblelink code" onclick="return showCourse(this, 'EN.600.444');">EN.600.444</a>.<br />Instructor(s): M. Zadeh.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.636.  Algorithms for Sensor-Based Robotics.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate level version of <a href="/search/?P=EN.600.436" title="EN.600.436" class="bubblelink code" onclick="return showCourse(this, 'EN.600.436');">EN.600.436</a> (see description above). Formerly <a href="/search/?P=EN.600.436" title="EN.600.436" class="bubblelink code" onclick="return showCourse(this, 'EN.600.436');">EN.600.436</a>. Students may receive credit for only one of EN.600.336, <a href="/search/?P=EN.600.436" title="EN.600.436" class="bubblelink code" onclick="return showCourse(this, 'EN.600.436');">EN.600.436</a> or <a href="/search/?P=EN.600.636" title="EN.600.636" class="bubblelink code" onclick="return showCourse(this, 'EN.600.636');">EN.600.636</a>. Recommended Course Background: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a>, <a href="/search/?P=AS.110.106" title="AS.110.106" class="bubblelink code" onclick="return showCourse(this, 'AS.110.106');">AS.110.106</a>, and Prob/Stat.<br /><strong>Prerequisites: Students may receive credit for only one of EN.600.336, <a href="/search/?P=EN.600.436" title="EN.600.436" class="bubblelink code" onclick="return showCourse(this, 'EN.600.436');">EN.600.436</a> and <a href="/search/?P=EN.600.636" title="EN.600.636" class="bubblelink code" onclick="return showCourse(this, 'EN.600.636');">EN.600.636</a>.</strong>
<br />Instructor(s): S. Leonard.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.638.  Computational Genomics: Data Analysis.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate level version of <a href="/search/?P=EN.600.438" title="EN.600.438" class="bubblelink code" onclick="return showCourse(this, 'EN.600.438');">EN.600.438</a>.  [Applications] 
Recommended Course Background: <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a> or other programming experience, probability and statistics, linear algebra or calculus. Students may receive credit for <a href="/search/?P=EN.600.438" title="EN.600.438" class="bubblelink code" onclick="return showCourse(this, 'EN.600.438');">EN.600.438</a> or <a href="/search/?P=EN.600.638" title="EN.600.638" class="bubblelink code" onclick="return showCourse(this, 'EN.600.638');">EN.600.638</a> but not both.<br /><strong>Prerequisites: Students may receive credit for <a href="/search/?P=EN.600.438" title="EN.600.438" class="bubblelink code" onclick="return showCourse(this, 'EN.600.438');">EN.600.438</a> or <a href="/search/?P=EN.600.638" title="EN.600.638" class="bubblelink code" onclick="return showCourse(this, 'EN.600.638');">EN.600.638</a>, but not both.</strong>
<br />Instructor(s): A. Battle
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.639.  Computational Genomics.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate version of <a href="/search/?P=EN.600.439" title="EN.600.439" class="bubblelink code" onclick="return showCourse(this, 'EN.600.439');">EN.600.439</a> [Applications] Students may earn credit for <a href="/search/?P=EN.600.439" title="EN.600.439" class="bubblelink code" onclick="return showCourse(this, 'EN.600.439');">EN.600.439</a> or <a href="/search/?P=EN.600.639" title="EN.600.639" class="bubblelink code" onclick="return showCourse(this, 'EN.600.639');">EN.600.639</a>, but not both. Recommended Course Background: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> and <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a><br />Instructor(s): B. Langmead
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.640.  Frontiers of Sequencing Data Analysis.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Public archives now contain petabytes of valuable but hard-to-analyze DNA sequencing data. Analyzing even small datasets is complicated by sequencing errors, differences between individuals, and the fragmentary nature of the the sequencing reads. In this course, we study recent algorithms and methods that seek to make sense of DNA sequencing datasets from small to very large. Topics covered will vary from year to year, but could include RNA sequencing data analysis, other functional genomics data analysis, metagenomics analysis, data compression, indexing, applications of streaming algorithms and sketch data structures, assembly, etc. There will be homework assignments and a course project. [Applications]<br />Instructor(s): B. Langmead.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.641.  Advanced Topics in Genomic Data Analysis.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Genomic data is becoming available in large quantities, but understanding how genetics contributes to human disease and other traits remains a major challenge.  Machine learning approaches allow us to automatically analyze and combine genomic data, build predictive models, and identify genetic elements important to disease and cellular processes.  This course will cover uses of machine learning in diverse genomic applications.  Students will present and discuss current literature. Topics include predicting disease risk from genomic data, integrating diverse genomic data types, gene network reconstruction, and other topics guided by student interest.  The course will include a project component with the opportunity to explore publicly available genomic data.  Recommended course background: coursework in data mining, machine learning.  [Applications]  Students may receive credit for 600.441 or 600.641, but not both.<br />Instructor(s): A. Battle.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.642.  Advanced Topics in Cryptography.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will focus on advanced cryptographic topics with an emphasis on open research problems and student presentations.<br />Instructor(s): A. Jain.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.643.  Advanced Topics in Computer Security.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Topics will vary from year to year, but will focus mainly on network perimeter protection, host-level protection, authentication technologies, intellectual property protection, formal analysis techniques, intrusion detection and similarly advanced subjects. Emphasis in this course is on understanding how security issues impact real systems, while maintaining an appreciation for grounding the work in fundamental science. Students will study and present various advanced research papers to the class. There will be homework assignments and a course project.<br />Instructor(s): A. Rubin.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.645.  Computer Integrated Surgery I.  4.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate version of <a href="/search/?P=EN.600.445" title="EN.600.445" class="bubblelink code" onclick="return showCourse(this, 'EN.600.445');">EN.600.445</a> (see description). Students may earn credit for <a href="/search/?P=EN.600.445" title="EN.600.445" class="bubblelink code" onclick="return showCourse(this, 'EN.600.445');">EN.600.445</a> or <a href="/search/?P=EN.600.645" title="EN.600.645" class="bubblelink code" onclick="return showCourse(this, 'EN.600.645');">EN.600.645</a>, but not both.  Prerequisites: data structures, and linear algebra, or permission; Recommended Course Background: intermediate programming in C/C++, <a href="/search/?P=EN.600.457" title="EN.600.457" class="bubblelink code" onclick="return showCourse(this, 'EN.600.457');">EN.600.457</a>, <a href="/search/?P=EN.600.461" title="EN.600.461" class="bubblelink code" onclick="return showCourse(this, 'EN.600.461');">EN.600.461</a>, image processing.   [Applications]<br />Instructor(s): R. Taylor
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.646.  Computer Integrated Surgery II.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Students may receive credit for <a href="/search/?P=EN.600.446" title="EN.600.446" class="bubblelink code" onclick="return showCourse(this, 'EN.600.446');">EN.600.446</a> or <a href="/search/?P=EN.600.646" title="EN.600.646" class="bubblelink code" onclick="return showCourse(this, 'EN.600.646');">EN.600.646</a>, but not both. Advanced version of <a href="/search/?P=EN.600.446" title="EN.600.446" class="bubblelink code" onclick="return showCourse(this, 'EN.600.446');">EN.600.446</a>. [Applications]<br /><strong>Prerequisites: <a href="/search/?P=EN.600.445" title="EN.600.445" class="bubblelink code" onclick="return showCourse(this, 'EN.600.445');">EN.600.445</a> OR <a href="/search/?P=EN.600.645" title="EN.600.645" class="bubblelink code" onclick="return showCourse(this, 'EN.600.645');">EN.600.645</a> OR PERMISSION OF INSTRUCTOR</strong>
<br />Instructor(s): R. Taylor.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.649.  Computational Genomics: Applied Comparative Genomics.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
The goal of this course is to study the leading computational and quantitative approaches for comparing and analyzing genomes starting from raw sequencing data. The course will focus on human genomics and human medical applications, but the techniques will be broadly applicable across the tree of life. The topics will include genome assembly &amp; comparative genomics, variant identification &amp; analysis, gene expression &amp; regulation, personal genome analysis, and cancer genomics. The grading will be based on assignments, a midterm &amp; final exam, class presentations, and a significant class project. [Applications]  Expected course background: familiarity with UNIX scripting and/or programming.<br />Instructor(s): M. Schatz.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.657.  Advanced Topics for Computer Graphics.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course presents advanced methodologies and their applications to computer graphics. Recommended Course Background: any computer science courses above the 400-level in computer graphics &amp; linear algebra; or permission of instructor.<br />Instructor(s): M. Kazhdan.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.659.  Introduction to Computational Geometry.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will provide an introduction to computational geometry. It will cover a number of topics in two- and three-dimensions, including polygon triangulations and partitions, convex hulls, Delaunay and Voronoi diagrams, arrangements, and spatial queries.  [Analysis]
Recommended Course Background: <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a>/463<br />Instructor(s): M. Kazhdan.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.660.  FFT in Graphics &amp; Vision.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
In this course, we will study the Fourier Transform from the perspective of representation theory. We will begin by considering the standard transform defined by the commutative group of rotations in 2D and translations in two- and three-dimensions, and will proceed to the Fourier Transform of the non-commutative group of 3D rotations. Subjects covered will include correlation of images, shape matching, computation of invariances, and symmetry detection.  Recommended Course Background: <a href="/search/?P=AS.110.201" title="AS.110.201" class="bubblelink code" onclick="return showCourse(this, 'AS.110.201');">AS.110.201</a> and comfort with mathematical derivations.<br />Instructor(s): M. Kazhdan.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.661.  Computer Vision.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate version of <a href="/search/?P=EN.600.461" title="EN.600.461" class="bubblelink code" onclick="return showCourse(this, 'EN.600.461');">EN.600.461</a>. Students may receive credit for at most one of EN.600.361 or <a href="/search/?P=EN.600.461" title="EN.600.461" class="bubblelink code" onclick="return showCourse(this, 'EN.600.461');">EN.600.461</a> or <a href="/search/?P=EN.600.661" title="EN.600.661" class="bubblelink code" onclick="return showCourse(this, 'EN.600.661');">EN.600.661</a>. [Applications]  Prerequisites (soft): intro programming, linear algebra, and prob/stat.<br /><strong>Prerequisites: If you have completed EN.600.361 OR <a href="/search/?P=EN.600.461" title="EN.600.461" class="bubblelink code" onclick="return showCourse(this, 'EN.600.461');">EN.600.461</a> you cannot enroll for <a href="/search/?P=EN.600.661" title="EN.600.661" class="bubblelink code" onclick="return showCourse(this, 'EN.600.661');">EN.600.661</a>.</strong>
<br />Instructor(s): A. Reiter.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.662.  Topics in Illumination and Reflectance Modelingfor Computer Vision and Medical Imaging Applications.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
The vast majority of all imagery on which computer vision is performed starts with a source of illumination in conjunction with a material reflectance property. Having a rigorous understanding of these phenomena is important for most students who want to be involved with further research in computer vision and computer integrated surgery, particularly for experimentation and development of new systems. This short course is for individuals who have already taken Computer Vision, and want to delve deeper into underlying physical modeling of light illumination, reflection, colorimetry, polarization  and even sensor fusion of images taken at different Wavelengths.<br /><strong>Prerequisites: EN.600.361 OR <a href="/search/?P=EN.600.461" title="EN.600.461" class="bubblelink code" onclick="return showCourse(this, 'EN.600.461');">EN.600.461</a> or Instructor permission required.</strong>
<br />Instructor(s): L. Wolff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.664.  Randomized and Big Data Algorithms.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate level version of <a href="/search/?P=EN.600.464" title="EN.600.464" class="bubblelink code" onclick="return showCourse(this, 'EN.600.464');">EN.600.464</a>. Recommended Course Background: <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a> or <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a>. Students may receive credit for <a href="/search/?P=EN.600.464" title="EN.600.464" class="bubblelink code" onclick="return showCourse(this, 'EN.600.464');">EN.600.464</a> or <a href="/search/?P=EN.600.664" title="EN.600.664" class="bubblelink code" onclick="return showCourse(this, 'EN.600.664');">EN.600.664</a>, but not both.<br />Instructor(s): V. Braverman
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.666.  Information Extraction.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Introduction to statistical methods of speech recognition (automatic transcription of speech) and understanding. The course is a natural continuation of <a href="/search/?P=EN.600.465" title="EN.600.465" class="bubblelink code" onclick="return showCourse(this, 'EN.600.465');">EN.600.465</a> but is independent of it. Topics include elementary information theory, hidden Markov models, the Baum and Viterbi algorithms, efficient hypothesis search methods, statistical decision trees, the estimation-maximization (EM) algorithm, maximum entropy estimation and estimation of discrete probabilities from sparse data for acoustic and language modeling.  Weekly assignments and several programming projects. Co-listed as <a href="/search/?P=EN.520.666" title="EN.520.666" class="bubblelink code" onclick="return showCourse(this, 'EN.520.666');">EN.520.666</a>. Recommended Course Background: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a> and <a href="/search/?P=EN.550.310" title="EN.550.310" class="bubblelink code" onclick="return showCourse(this, 'EN.550.310');">EN.550.310</a> or equivalent, expertise in C or C++ programming<br />Instructor(s): S. Khudanpur.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.667.  Advanced Distributed Systems &amp; Networks.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
The course explores the state of the art in distributed systems, networks and Internet research and practice, trying to see what it would take to push the envelop a step further. The course is conducted as a discussion group, where the professor and students brainstorm and pick interesting semester-long projects with high potential future impact. Example areas include robust scalable infrastructure (distributed datacenters, cloud networking, scada systems), real-time performance (remote surgery, trading systems), hybrid networks (mesh networks, 3-4G/Wifi/Bluetooth). Students should feel free to bring their own topics of interest and ideas. Recommended Course Background: a systems course (distributed systems, operating systems, computer networks, parallel programming) or permission of instructor.<br />Instructor(s): Y. Amir.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.668.  Advanced Topics in Software Security.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Topics vary but mainly focus on recent advances in exploitation techniques and defenses for software including software running on embedded systems software, browsers, and nontraditional devices such as microcontrollers in PCs. Recommended Course Background: <a href="/search/?P=EN.600.460" title="EN.600.460" class="bubblelink code" onclick="return showCourse(this, 'EN.600.460');">EN.600.460</a> or EN.650.442 or permission of instructor<br />Instructor(s): S. Checkoway.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.669.  Approximation Algorithms.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate version of <a href="/search/?P=EN.600.469" title="EN.600.469" class="bubblelink code" onclick="return showCourse(this, 'EN.600.469');">EN.600.469</a>.  Students may receive credit for <a href="/search/?P=EN.600.469" title="EN.600.469" class="bubblelink code" onclick="return showCourse(this, 'EN.600.469');">EN.600.469</a> or <a href="/search/?P=EN.600.669" title="EN.600.669" class="bubblelink code" onclick="return showCourse(this, 'EN.600.669');">EN.600.669</a>, but not both.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a> OR <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a> OR permission</strong>
<br />Instructor(s): M. Dinitz.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.670.  Pseudorandomness and Combinatorial Constructions.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Randomness is very useful in almost all areas of computer science, such as algorithms, distributed computing and cryptography. However, computers generally do not have access to truly uniform random bits. To deal with this, we rely on various pseudorandom objects to reduce either the quantity or the quality of the random bits needed. In this course, we will develop provably good pseudorandom objects for a variety of tasks. We will frequently require explicit combinatorial constructions. That is, we will want to efficiently and deterministically construct such objects. Along the way, we will also explore the close connections of such objects to many other areas in computer science and mathematics, such as graph theory, coding theory, complexity theory and arithmetic combinatorics. [Analysis]
Recommended Course Background: <a href="/search/?P=EN.600.271" title="EN.600.271" class="bubblelink code" onclick="return showCourse(this, 'EN.600.271');">EN.600.271</a>/417, <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a>/463 and probability.<br />Instructor(s): X. Li.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.675.  Statistical Machine Learning.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This is a second graduate level course in machine learning. It will provide a formal and an in-depth coverage of topics at the interface of statistical theory and computational sciences. We will revisit popular machine learning algorithms and understand their performance in terms of the size of the data (sample complexity), memory needed (space complexity), as well as the overall computational runtime (computation or iteration complexity). We will cover topics including nonparametric methods, kernel methods, online learning and reinforcement learning, as well as introduce students to current topics in large-scale machine-learning and randomized projections. Topics will vary from year-to-year but the general focus would be on combining methodology with theoretical and computational foundations. [Analysis or Applications]<br /><strong>Prerequisites: <a href="/search/?P=EN.600.475" title="EN.600.475" class="bubblelink code" onclick="return showCourse(this, 'EN.600.475');">EN.600.475</a> OR <a href="/search/?P=EN.600.476" title="EN.600.476" class="bubblelink code" onclick="return showCourse(this, 'EN.600.476');">EN.600.476</a> OR <a href="/search/?P=EN.600.676" title="EN.600.676" class="bubblelink code" onclick="return showCourse(this, 'EN.600.676');">EN.600.676</a> OR permission of the instructor.</strong>
<br />Instructor(s): R. Arora.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.676.  Machine Learning: Data to Models.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Students in the class will be asked to do assignments in Matlab. Matlab is typically easy to pick up if one is already familiar with a different programming language. Students are expected to be mathematically mature. One should have taken at least an introductory course in probability theory and linear algebra. Though not required, exposure to optimization or machine learning is recommended. Proficiency in at least one programming language is expected. When in doubt, send the instructor a copy of your transcript to see if the class is appropriate for you. Also, sit through the first few sessions and first homework to get a sense of fit. Requistes include Intro Prob/Stat, Linear Algebra and Intro Machine Learning as well as strong background in s.<br />Instructor(s): S. Saria.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.677.  Causal Inference.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Advanced graduate version of <a href="/search/?P=EN.600.477" title="EN.600.477" class="bubblelink code" onclick="return showCourse(this, 'EN.600.477');">EN.600.477</a>.  [Analysis]  Pre-requisites: familiarity with the R programming language, multivariate calculus, basics of linear algebra and probability.  Students may receive credit for <a href="/search/?P=EN.600.477" title="EN.600.477" class="bubblelink code" onclick="return showCourse(this, 'EN.600.477');">EN.600.477</a> or <a href="/search/?P=EN.600.677" title="EN.600.677" class="bubblelink code" onclick="return showCourse(this, 'EN.600.677');">EN.600.677</a>, but not both.<br /><strong>Prerequisites: Students may receive credit for <a href="/search/?P=EN.600.477" title="EN.600.477" class="bubblelink code" onclick="return showCourse(this, 'EN.600.477');">EN.600.477</a> or <a href="/search/?P=EN.600.677" title="EN.600.677" class="bubblelink code" onclick="return showCourse(this, 'EN.600.677');">EN.600.677</a>, but not both.</strong>
<br />Instructor(s): I. Shpitser
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.678.  Advanced Topics in Causal Inference.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will cover advanced topics on all areas of causal  inference, including learning causal effects, path-specific effects, and optimal policies from data featuring biases induced by missing data, confounders, selection, and measurement error, techniques for generalizing findings to different populations, complex probabilistic models relevant for causal inference applications, learning causal structure from data, and inference under interference and network effects.  The course will feature a final project which would involve either an applied data analysis problem (with a causal inference flavor), a literature review, or theoretical work.  [Analysis] Pre-requisite: <a href="/search/?P=EN.600.477" title="EN.600.477" class="bubblelink code" onclick="return showCourse(this, 'EN.600.477');">EN.600.477</a>/677 or permission.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.477" title="EN.600.477" class="bubblelink code" onclick="return showCourse(this, 'EN.600.477');">EN.600.477</a> OR <a href="/search/?P=EN.600.677" title="EN.600.677" class="bubblelink code" onclick="return showCourse(this, 'EN.600.677');">EN.600.677</a></strong>
<br />Instructor(s): I. Shpitser.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.679.  Representation Learning.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
Graduate level version of 600.479.  Students may receive credit for 600.479 or 600.679 but not both.  [Analysis or Applications] Required course background: machine learning or basic probability and linear algebra. Co-listed with <a href="/search/?P=EN.600.479" title="EN.600.479" class="bubblelink code" onclick="return showCourse(this, 'EN.600.479');">EN.600.479</a><br /><strong>Prerequisites: If you have completed <a href="/search/?P=EN.600.479" title="EN.600.479" class="bubblelink code" onclick="return showCourse(this, 'EN.600.479');">EN.600.479</a> you may not enroll in <a href="/search/?P=EN.600.679" title="EN.600.679" class="bubblelink code" onclick="return showCourse(this, 'EN.600.679');">EN.600.679</a>.</strong>
<br />Instructor(s): R. Arora.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.682.  Deep Learning for Image Understanding.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course discusses advanced topics on the recent progresses using deep learning,specifically deep convolutional neural networks in computer vision and medical image analysis.Topics will be selected from most recent papers from CVPR/ICCV/ArXiv/NIPS/MICCAI, with the core focus on object/scene recognition, object detection, domain transfer learning and computer-aided diagnosis. This course is targeted toward graduate students who are interested in mastering the understanding of the recent massive amount of literature and applying the skills to a course project (with lectures, paper reading, in-class presentation &amp; discussion and a final research project).[Applications]<br /><strong>Prerequisites: Prereq: <a href="/search/?P=EN.600.461" title="EN.600.461" class="bubblelink code" onclick="return showCourse(this, 'EN.600.461');">EN.600.461</a> OR <a href="/search/?P=EN.600.661" title="EN.600.661" class="bubblelink code" onclick="return showCourse(this, 'EN.600.661');">EN.600.661</a></strong>
<br />Instructor(s): L. Lu.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.683.  Vision as Bayesian Inference.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This is an advanced course on computer vision from a probabilistic and machine learning perspective. It covers techniques such as linear and non-linear filtering, geometry, energy function methods, markov random fields, conditional random fields, graphical models, probabilistic grammars, and deep neural networks. These are illustrated on a set of vision problems ranging from image segmentation, semantic segmentation, depth estimation, object recognition, object parsing, scene parsing, action recognition, and text captioning.  [Analysis or
Applications]   Required course background: calculus, linear algebra (<a href="/search/?P=AS.110.201" title="AS.110.201" class="bubblelink code" onclick="return showCourse(this, 'AS.110.201');">AS.110.201</a> or equiv.), probability and statistics (AS.550.311 or equiv.), and the ability to program in Python and C++.  Background in computer vision (<a href="/search/?P=EN.600.461" title="EN.600.461" class="bubblelink code" onclick="return showCourse(this, 'EN.600.461');">EN.600.461</a>/661) and machine learning (<a href="/search/?P=EN.600.475" title="EN.600.475" class="bubblelink code" onclick="return showCourse(this, 'EN.600.475');">EN.600.475</a>) suggested but not required.<br />Instructor(s): A. Yuille.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.684.  Augmented Reality.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course introduces students to the field of Augmented Reality. It reviews its basic definitions, principles and applications. It then focuses on Medical Augmented Reality and its particular requirements. The course also discusses the main issues of calibration, tracking, multi-modal registration, advance visualization and display technologies. Homework in this course will relate to the mathematical methods used for calibration, tracking and visualization in medical augmented reality. Students may also be asked to read papers and implement various techniques within  group projects.  Recommended Course Background: <a href="/search/?P=EN.600.120" title="EN.600.120" class="bubblelink code" onclick="return showCourse(this, 'EN.600.120');">EN.600.120</a>, <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a>, and <a href="/search/?P=AS.110.201" title="AS.110.201" class="bubblelink code" onclick="return showCourse(this, 'AS.110.201');">AS.110.201</a>. [Applications]<br /><strong>Prerequisites: Students may take only EN.600.384 or <a href="/search/?P=EN.600.684" title="EN.600.684" class="bubblelink code" onclick="return showCourse(this, 'EN.600.684');">EN.600.684</a>, not both.</strong>
<br />Instructor(s): N. Navab.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.688.  Foundations of Computational BIology &amp; Bioinformatics II.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will introduce probabilistic modeling and information theory applied to biological sequence analysis, focusing on statistical models of protein families, alignment algorithms, and models of evolution. Topics will include probability theory, score matrices, hidden Markov models, maximum likelihood, expectation maximization and dynamic programming algorithms. Homework assignments will require programming in Python. Co-listed with <a href="/search/?P=EN.580.688" title="EN.580.688" class="bubblelink code" onclick="return showCourse(this, 'EN.580.688');">EN.580.688</a>. 
Recommended Course Background: math through linear algebra and differential equations, at least one prob/stat course, <a href="/search/?P=EN.580.221" title="EN.580.221" class="bubblelink code" onclick="return showCourse(this, 'EN.580.221');">EN.580.221</a> or equivalent, <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a> or equivalent.<br />Instructor(s): R. Karchin.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.692.  Unsupervised Learning: From Big Data to Low-Dimensional Representations.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
In the era of data deluge, the development of methods for discovering structure in high-dimensional data is becoming increasingly important. This course will cover state-of-the-art methods from algebraic geometry, sparse and low-rank representations, and statistical learning for modeling and clustering high-dimensional data. The first part of the course will cover methods for modeling data with a single low-dimensional subspace, such as PCA, Robust PCA, Kernel PCA, and manifold learning techniques. The second part of the course will cover methods for modeling data with multiple subspaces, such as algebraic, statistical, sparse and low-rank subspace clustering techniques. The third part of the course will cover applications of these methods in image processing, computer vision, and biomedical imaging. Requistes include Linear Algebra, Optimization, and prior exposure to Machine I.<br />Instructor(s): R. Vidal.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.707.  Selected Topics in CS Education.  0.50 Credits.</strong></p>
<p class="courseblockdesc">
This course will explore current issues and research in computer science education.  Topics will be drawn from literature, news items, and participant experience.  Current faculty and students with interests in academic careers are encouraged to attend.<br />Instructor(s): J. Selinski.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.716.  Selected Topics on Innovative Data Systems.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This weekly reading group will survey and dissect the cutting-edge on innovative data systems research. Topics will encompass methods and abstraction in core systems and data management areas (eg, cloud computing, scalable programming and storage), as well as use-cases and war stories from industry, and science and engineering applications. 
View on web: Our semester schedule is posted at damsel.cs.jhu.edu/blockparty<br />Instructor(s): Y. Ahmad.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.726.  Selected Topics in Programming Languages.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This seminar course covers recent developments in the foundations of programming language design and implementation. Topics covered include type theory, process algebra, higher-order program analysis, and constraint systems. Students will be expected to present papers orally.<br />Instructor(s): S. Smith.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.728.  Selected Topics in Category Theory.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Students in this course will read a sampling of standard texts in Category Theory (e.g. the books by Awodey, Mac Lane, Pierce, or others) and papers relevant to the research of participants.<br />Instructor(s): N. Filardo.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.745.  Seminar in Computational Sensing and Robotics.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This weekly seminar will focus on research issues in computer integrated surgery, including subjects such as medical image analysis, statistical modeling, visualization, vision/sensing, surgical planning, medical robotics, and clinical applications. The purpose of the course is to widen the knowledge and awareness of the participants in current research in these areas, as well as to promote greater awareness and interaction between multiple research groups within the University and beyond. The format of the course is informal presentation by a pre-eminent invited speaker, followed by free discussion. 
Formerly Seminar in Computer Integrated Surgery (CISST)<br />Instructor(s): P. Kazanzides.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.746.  Seminar: Medical Image Analysis.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This weekly seminar will focus on research issues in medical image analysis, including image
segmentation, registration, statistical modeling, and applications. It will also include selected topics
relating to medical image acquisition, especially where they relate to analysis. The purpose of the
course is to provide the participants with a thorough background in current research in these areas, as well as to promote greater awareness and interaction between multiple research groups within
the University. The format of the course is informal. Students will read selected papers. All students will be assumed to have read these papers by the time the paper is scheduled for discussion. But individual students will be assigned on a rotating basis to lead the discussion on particular papers or sections of papers. Co-listed with <a href="/search/?P=EN.520.746" title="EN.520.746" class="bubblelink code" onclick="return showCourse(this, 'EN.520.746');">EN.520.746</a>.<br />Instructor(s): J. Prince; R. Taylor.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.757.  Selected Topics in Computer Graphics.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
In this course we will review current research in computer graphics. We will meet for an hour once a week and one of the participants will lead the discussion for the week.<br />Instructor(s): M. Kazhdan.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.760.  CS Theory Seminar.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Seminar series in theoretical computer science. Topics include algorithms, complexity theory, and related areas of TCS. Speakers will be a mix of internal and external researchers, mostly presenting recently published research papers.<br />Instructor(s): M. Dinitz; V. Braverman; X. Li.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.764.  Seminar in Algorithms.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This course will explore algorithms and theoretical computer science with a focus on algorithms for massive data. Examples of topics include streaming algorithms, approximation algorithms, online algorithms. Students will be encouraged to select a paper and lead a discussion. External speakers will be invited to present current work as well. This course is a good opportunity for motivated students to learn modern algorithmic methods.
Recommended Course Background: <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a> or equivalent.<br />Instructor(s): V. Braverman
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.765.  Selected Topics in Natural Language Processing.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
A reading group exploring important current research in the field and potentially relevant material from related fields. Enrolled students are expected to present papers and lead discussion.<br /><strong>Prerequisites: <a href="/search/?P=EN.600.465" title="EN.600.465" class="bubblelink code" onclick="return showCourse(this, 'EN.600.465');">EN.600.465</a> or permission of instructor</strong>
<br />Instructor(s): J. Eisner.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.766.  Selected Topics in Meaning, Translation and Generation of Text.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
A seminar focused on current research and survey articles on computational semantics.<br />Instructor(s): B. Van Durme; K. Rawlins.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.767.  Selected Topics in Systems Research.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Students will review, present, and discuss current research in computer systems, distributed systems, and computer networks, in the contexts of dependability, performance and scalability.<br />Instructor(s): Y. Amir.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.768.  Selected Topics in Machine Translation.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Students in this course will review, present, and discuss currentresearch in machine translation. Permission of instructor.<br />Instructor(s): P. Koehn.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.770.  Selected Topics in Algorithms for Metric Spaces.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This course will focus on algorithms that use, simplify, or exploit metric spaces.  Examples of topics we will address include metric embeddings and their applications, algorithms to exploit low dimensionality, graph spanners and sparsifiers, and data structures such as distance oracles and compact routing schemes that allow us to efficiently find distances and paths.  This course will mostly be in the form of a reading group, and students will present a paper and lead a discussion. Recommended Course Background: <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a> or <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a> or permission of the instructor.<br />Instructor(s): M. Dinitz.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.771.  Probability on Strings, Trees, and Sequences.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Many areas of practical computer science focus on discrete data that is sequential or tree-shaped: natural language processing (sentences and their analyses), computational biology (DNA and protein structures),  programming languages (computer programs and their interpretations), and compression (sequences of bits). When the data is noisy or ambiguous, decision-making requires probabilistic methods. We will survey formal tools for manipulating sets of strings, trees, sequences, and defining probabilistic models over these sets. Much of the material covers advanced topics at the intersection of formal language and automata theory, probability, and algorithms. Respectively, these three areas will enable us to represent sets, represent uncertainty, and process everything efficiently.<br />Instructor(s): A. Lopez.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.772.  Selected Topics in Linear Programming and Semi-definite Programming.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Linear programming and semi-definite programming are powerful techniques in convex optimization. They have been used to achieve the best known approximation results for many important combinatorial optimization problems, such as vertex cover, max cut, sparsest cut and MAX-2-SAT. In this course we will together explore the applications of these techniques in computer science, as well as some recent results about their limitations. Time permitting, we may also discuss their connections to the well-known unique games conjecture.  This course will be in the form of a reading group, and students are encouraged to select a paper and lead a discussion. Recommended course background: <a href="/search/?P=EN.600.463" title="EN.600.463" class="bubblelink code" onclick="return showCourse(this, 'EN.600.463');">EN.600.463</a> and <a href="/search/?P=EN.600.464" title="EN.600.464" class="bubblelink code" onclick="return showCourse(this, 'EN.600.464');">EN.600.464</a>.<br />Instructor(s): X. Li.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.775.  Selected Topics in Machine Learning.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This seminar is recommended for all students interested in data intensive computing research areas (e.g., machine learning, computer vision, natural language processing, speech, computational social science). The meeting format is participatory. Papers that discuss best practices and the state-of-the-art across application areas of machine learning and data intensive computing will be read. Student volunteers lead individual meetings. Faculty and external speakers present from time-to-time. Recommended Course Background: machine learning or permission of the instructor.<br />Instructor(s): M. Dredze; R. Arora; S. Saria.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.780.  Selected Topics in Computational Genomics.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This course will survey current areas where computer science approaches have been applied to genomics research.  Chiefly, the course focuses on DNA sequencing data analysis, including sequence alignment, de novo assembly, error correction, and DNA data compression.  Subject matter will be partially guided by student interests.  Students will present papers orally.<br />Instructor(s): B. Langmead.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.801.  PhD Research.  3.00 - 20.00 Credit.</strong></p>
<p class="courseblockdesc">
Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.802.  PhD Research.  3.00 - 20.00 Credit.</strong></p>
<p class="courseblockdesc">
Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.803.  Masters Research.  3.00 - 10.00 Credit.</strong></p>
<p class="courseblockdesc">
Permission required. Independent research for masters or pre-dissertation PhD students.<br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.804.  Masters Research.  1.00 - 3.00 Credit.</strong></p>
<p class="courseblockdesc">
Independent research for masters or pre-dissertation PhD students. Permission required.<br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.807.  Teaching Practicum.  1.00 - 3.00 Credit.</strong></p>
<p class="courseblockdesc">
PhD students will gain valuable teaching experience, working closely with their assigned faculty supervisor.  Successful completion of this course fulfills the PhD teaching requirement.
(grad students) Permission req'd.<br />Instructor(s): J. Selinski.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.809.  Independent Study.  1.00 - 3.00 Credit.</strong></p>
<p class="courseblockdesc">
Permission required.  Individual study in an area of mutual interest to a graduate student and a faculty member in the department.<br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.810.  Graduate Independent Study.  1.00 - 3.00 Credit.</strong></p>
<p class="courseblockdesc">
Permission required.<br />Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.891.  Independent Study-Summer.  1.00 - 3.00 Credit.</strong></p>
<p class="courseblockdesc">
Instructor(s): Staff.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.600.895.  Research-Summer.  1.00 - 3.00 Credit.</strong></p>
<p class="courseblockdesc">
Instructor(s): Staff.<br />
</p>
</div><h3>Cross Listed Courses</h3>
<h4>Cognitive Science</h4>
<div class="courseblock">
<p class="courseblocktitle"><strong>AS.050.814.  Research Seminar in Computer Vision.  </strong></p>
<p class="courseblockdesc">
This course covers advanced topics in computational vision. It discusses and reviews recent progress and technical advances in visual topics such as object recognition, scene understanding, and image parsing.<br />Instructor(s): A. Yuille.<br />
</p>
</div><h4>Physics & Astronomy</h4>
<div class="courseblock">
<p class="courseblocktitle"><strong>AS.171.205.  Introduction to Practical Data Science: Beautiful Data.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
The class will provide an overview of data science, with an introduction to basic statistical principles, databases, fundamentals of algorithms and data structures, followed by practical problems in data analytics. Recommend Course Background: Familiarity with principles of computing.<br />Instructor(s): S. Szalay
<br />Area: Natural Sciences, Quantitative and Mathematical Sciences.<br />
</p>
</div><h4>General Engineering</h4>
<div class="courseblock">
<p class="courseblocktitle"><strong>EN.500.745.  Seminar in Computational Sensing and Robotics.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
Seminar series in robotics.  Topics include: Medical robotics, including computer-integrated surgical systems and image-guided intervention. Sensor based robotics, including computer vision and biomedical image analysis.  Algorithmic robotics, robot control and machine learning. Autonomous robotics for monitoring, exploration and manipulation with applications in home, environmental (land, sea, space), and defense areas. Biorobotics and neuromechanics, including devices, algorithms and approaches to robotics inspired by principles in biomechanics and neuroscience. Human-machine systems, including haptic and visual feedback, human perception, cognition and decision making, and human-machine collaborative systems.
Cross-listed Mechanical Engineering, Computer Science, Electrical and Computer Engineering, and Biomedical Engineering.<br />Instructor(s): L. Whitcomb; N. Cowan; P. Kazanzides; R. Etienne Cummings; R. Vidal.<br />
</p>
</div><h4>Electrical & Computer Engineering</h4>
<div class="courseblock">
<p class="courseblocktitle"><strong>EN.520.434.  Modern Biomedical Imaging Instrumentation and Techniques.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
An intermediate biomedical imaging course covering modern biomedical imaging instrumentation and techniques as applied to diagnostic radiology and other biomedical applications. It includes recent advances in various biomedical imaging modalities, multi-   modality imaging and molecular imaging. The course is team taught by experts in the respective fields and provides a broad based knowledge of modern biomedical imaging to prepare students for graduate studies and research in biomedical imaging. Also, the course will offer tours and practical experience with modern biomedical imaging equipments in clinical and research settings. Co-listed with <a href="/search/?P=EN.580.473" title="EN.580.473" class="bubblelink code" onclick="return showCourse(this, 'EN.580.473');">EN.580.473</a><br /><strong>Prerequisites: <a href="/search/?P=EN.520.432" title="EN.520.432" class="bubblelink code" onclick="return showCourse(this, 'EN.520.432');">EN.520.432</a> OR <a href="/search/?P=EN.580.472" title="EN.580.472" class="bubblelink code" onclick="return showCourse(this, 'EN.580.472');">EN.580.472</a></strong>
<br />Instructor(s): B. Tsui.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.520.447.  Information Theory.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will address some basic scientific questions about systems that store or communicate information. Mathematical models will be developed for (1) the process of error-free data compression leading to the notion of entropy, (2) data (e.g. image) compression with slightly degraded reproduction leading to rate-distortion theory and (3) error-free communication of information over noisy channels leading to the notion of channel capacity. It will be shown how these quantitative measures of information have fundamental connections with statistical physics (thermodynamics), computer science (string complexity), economics (optimal portfolios), probability theory (large deviations), and statistics (Fisher information, hypothesis testing).<br />Instructor(s): S. Khudanpur
<br />Area: Engineering, Quantitative and Mathematical Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.520.701.  Current Topics in Language and Speech Processing.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This biweekly seminar will cover a broad range of current research topics in human language technology, including automatic speech recognition, natural language processing and machine translation.  The Tuesday seminars will feature distinguished invited speakers, while the Friday seminars will be given by participating students.  A minimum of 75% attendance and active participation will be required to earn a passing grade. Grading will be S/U.<br />Instructor(s): S. Khudanpur.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.520.702.  Current Topics in Language and Speech  Processing.  1.00 Credit.</strong></p>
<p class="courseblockdesc">
This biweekly seminar will cover a broad range of current research topics in human language technology, including automatic speech recognition, natural language processing and machine translation.  The Tuesday seminars will feature distinguished invited speakers, while the Friday seminars will be given by participating students.  A minimum of 75% attendance and active participation will be required to earn a passing grade. Cross-listed with Computer Science. Grading will be S/U.<br />Instructor(s): S. Khudanpur
<br />Area: Engineering.<br />
</p>
</div><h4>Mechanical Engineering</h4>
<div class="courseblock">
<p class="courseblocktitle"><strong>EN.530.707.  Robot System Programming.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course seeks to introduce students to open-source software tools that are available today for building complex experimental and fieldable robotic systems. The course is grouped into sections, each of which building on the previous in increasing complexity and specificity: tools and frameworks supporting robotics research, robotics-specific software frameworks, integrating complete robotic systems, and culminates with an independent project of the student's own design using small mobile robots or other robots in the lab. Students will need to provide a computer or a virtual-box (with at least a few GB of memory and a several tens of GB of disc space) running Ubuntu (https://www.ubuntu.com or one of its variants such as Xubuntu) and ROS (http://ros.org/). 
Students should have an understanding of intermediate programming in C/C++ (including data structures and dynamic memory allocation) Familiarity with Linux programming. Familiarity with software version control systems (e.g. subversion, mercurial, git), linear algebra. 
Recommended Course Background: <a href="/search/?P=EN.530.646" title="EN.530.646" class="bubblelink code" onclick="return showCourse(this, 'EN.530.646');">EN.530.646</a> Robot Devices, Kinematics, Dynamics, and Control and <a href="/search/?P=EN.600.636" title="EN.600.636" class="bubblelink code" onclick="return showCourse(this, 'EN.600.636');">EN.600.636</a> Algorithms for Sensor Based Robotics. Students should see the 2016 course homepage
http://dscl.lcsr.jhu.edu/ME530707_2016 for more information and to get started with the course. Recommended Course Background: <a href="/search/?P=EN.530.646" title="EN.530.646" class="bubblelink code" onclick="return showCourse(this, 'EN.530.646');">EN.530.646</a> and <a href="/search/?P=EN.600.436" title="EN.600.436" class="bubblelink code" onclick="return showCourse(this, 'EN.600.436');">EN.600.436</a>.<br />Instructor(s): L. Whitcomb.<br />
</p>
</div><h4>Biomedical Engineering</h4>
<div class="courseblock">
<p class="courseblocktitle"><strong>EN.580.468.  The Art of Data Science.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
In this course, we will cover the fundamentals of doing data science research, explaining best practices for each step, that collectively comprise an upward spiral.  These steps include: 
(i) asking an interesting question, (ii) determining the degree to which the answer is known, (iii) assessing there currently exists data to likely obtain a satisfactory answer, (iv) exploring the data set, (v) cleaning up the dataset, (vi) formalizing a statistical inquiry, (vii) positing a statistical model which we hope will yield satisfactory answers, (viii) devising a test to assess the answer, (ix) building an estimator to assess the model, (x) checking the model, (xi) reporting the results, (xii) suggesting the next experiment to perform or question to answer to further enhance the model.
Note that this course will largely be project based; each student will be expected to complete each of the above steps on some real data of interest to the student.  Lectures will be minimal, 
giving introductory explanations one day, hopefully only part of the time.  The rest of the time, we will work independently or in small groups to complete the weekly portion of the overall 
project.  Please come ready to do science! If you don't have questions that you want answered, you can work in small groups, but each student will need to write the code and reports on their own. 
Recommended Course Background: No courses are formally required, though students will need to write numerical code (in R, Python, or Julia), and make reports using LaTeX, knitr, or Jupyter notebooks or similar..<br />Instructor(s): J. Vogelstein
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.580.473.  Modern Biomedical Imaging Instrumentation and Techniques.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
An intermediate biomedical imaging course covering modern biomedical imaging instrumentation and techniques as applied to diagnostic radiology and other biomedical applications. It includes recent advances in various biomedical imaging modalities, multi-modality imaging and molecular imaging. The course is team taught by experts in the respective fields and provides a broad based knowledge of modern biomedical imaging to prepare students for graduate studies and research in biomedical imaging. Also, the course will offer tours and practical experience with modern biomedical imaging equipment in clinical and research settings. Co-listed with <a href="/search/?P=EN.520.434" title="EN.520.434" class="bubblelink code" onclick="return showCourse(this, 'EN.520.434');">EN.520.434</a>
Recommended course background: <a href="/search/?P=EN.520.432" title="EN.520.432" class="bubblelink code" onclick="return showCourse(this, 'EN.520.432');">EN.520.432</a> or <a href="/search/?P=EN.580.472" title="EN.580.472" class="bubblelink code" onclick="return showCourse(this, 'EN.580.472');">EN.580.472</a><br /><strong>Prerequisites: <a href="/search/?P=EN.520.432" title="EN.520.432" class="bubblelink code" onclick="return showCourse(this, 'EN.520.432');">EN.520.432</a> OR <a href="/search/?P=EN.580.472" title="EN.580.472" class="bubblelink code" onclick="return showCourse(this, 'EN.580.472');">EN.580.472</a></strong>
<br />Instructor(s): B. Tsui
<br />Area: Engineering, Natural Sciences.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.580.668.  The Art of Data Science.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
In this course, we will cover the fundamentals of doing data science research, explaining best practices for each step, that collectively comprise an upward spiral.  These steps include: 
(i) asking an interesting question, (ii) determining the degree to which the answer is known, (iii) assessing there currently exists data to likely obtain a satisfactory answer, 
(iv) exploring the data set, (v) cleaning up the dataset, (vi) formalizing a statistical inquiry, (vii) positing a statistical model which we hope will yield satisfactory answers, 
(viii) devising a test to assess the answer, (ix) building an estimator to assess the model, (x) checking the model, (xi) reporting the results, (xii) suggesting the next experiment to 
perform or question to answer to further enhance the model.
Note that this course will largely be project based; each student will be expected to complete each of the above steps on some real data of interest to the student.  Lectures will be minimal, 
giving introductory explanations one day, hopefully only part of the time.  The rest of the time, we will work independently or in small groups to complete the weekly portion of the overall 
project.  Please come ready to do science! If you don't have questions that you want answered, you can work in small groups, but each student will need to write the code and reports on their own.
Recommended background: No courses are formally required, though students will need to write numerical code (in R, Python, or Julia), and make reports using LaTeX, knitr, or Jupyter notebooks or similar.<br />Instructor(s): J. Vogelstein
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.580.688.  Foundations of Computational Biology &amp; Bioinformatics II.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will introduce probabilistic modeling and information theory applied to biological sequence analysis, focusing on statistical models of protein families, alignment algorithms, and models of evolution.  Topics will include probability theory, score matrices, hidden Markov models, maximum likelihood, expectation maximization and dynamic programming algorithms.  Homework assignments will require programming in Python. Recommended Course Background: Math through linear algebra and differential equations, <a href="/search/?P=EN.580.221" title="EN.580.221" class="bubblelink code" onclick="return showCourse(this, 'EN.580.221');">EN.580.221</a> or equivalent, <a href="/search/?P=EN.600.226" title="EN.600.226" class="bubblelink code" onclick="return showCourse(this, 'EN.600.226');">EN.600.226</a> or equivalent.<br />Instructor(s): R. Karchin.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.580.689.  Computational Personal Genomics.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
What can we learn from the genome sequence of an individual? Genomic technology now makes it possible to generate huge amounts of DNA sequence data for a single individual at a relatively low cost. To make sense of this data, we need to employ sophisticated computational methods to identify genetic variations that influence an individual’s health. 
In this course, we will first review the state of the art in sequencing technology, and discuss how this technology is being applied to study human biology and disease. We will then explore the computational methods used to turn raw sequence data into knowledge. Topics will include genetic variant detection; discovery of chromosomal rearrangements and fusions; methods to measure gene expression from RNA; and measurements of the microbiome living inside our bodies.
Recommended Course Background: <a href="/search/?P=EN.600.439" title="EN.600.439" class="bubblelink code" onclick="return showCourse(this, 'EN.600.439');">EN.600.439</a>/639,  <a href="/search/?P=EN.600.363" title="EN.600.363" class="bubblelink code" onclick="return showCourse(this, 'EN.600.363');">EN.600.363</a>/463, <a href="/search/?P=EN.600.688" title="EN.600.688" class="bubblelink code" onclick="return showCourse(this, 'EN.600.688');">EN.600.688</a>, <a href="/search/?P=EN.580.688" title="EN.580.688" class="bubblelink code" onclick="return showCourse(this, 'EN.580.688');">EN.580.688</a> (any one is sufficient), or permission of the instructor. Course is also open to undergraduate students.<br />Instructor(s): S. Salzberg
<br />Area: Engineering.<br />
</p>
</div><div class="courseblock">
<p class="courseblocktitle"><strong>EN.580.694.  Statistical Connectomics.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course will cover the basics of an exciting emerging field of statistical connectomics (aka, brain-graphs).  It is so new, that we are going to make some of it up in this class! The first week will be introductory lectures that I give. The rest of the semester will be run like a seminar; each week will focus on a different topic.  On Tuesdays we will hear about a statistical method that operates on graphs, and on Thursdays we will read about some neuroscience data upon which one could apply these techniques.  The final project will consist of implementing a statistical method devised for graphs on a brain-graph problem.
Recommended background: coursework in probability, linear algebra, and numerical programming (eg, R, Python, Matlab).<br />Instructor(s): J. Vogelstein
<br />Area: Engineering.<br />
</p>
</div><h4>Information Security Institute</h4>
<div class="courseblock">
<p class="courseblocktitle"><strong>EN.650.624.  Advanced Network Security.  3.00 Credits.</strong></p>
<p class="courseblockdesc">
This course focuses on advanced security topics and research in computer networks. It builds on the basic overview of network security covered in previous security courses. Beyond the basics of developing security network communications and applications, this advanced course dives deeper into the theory and practice behind network attack, the growing reality of weaponized zero-day vulnerabilities, and the current state-of-the-art responses. Course work includes reviewing contemporary security research papers, hands-on experiments in defending/attacking networks, and writing analyses.<br /><strong>Prerequisites: <a href="/search/?P=EN.650.424" title="EN.650.424" class="bubblelink code" onclick="return showCourse(this, 'EN.650.424');">EN.650.424</a> OR <a href="/search/?P=EN.600.424" title="EN.600.424" class="bubblelink code" onclick="return showCourse(this, 'EN.600.424');">EN.600.424</a> or permission of the instructor.</strong>
<br />Instructor(s): S. Nielson
<br />Area: Engineering.<br />
</p>
</div>
</div>
</div>

<div id="facultycontainer" class="tab_content" role="tabpanel">
<p>For current faculty and contact information go to <a href="http://cs.jhu.edu/faculty/">http://cs.jhu.edu/faculty/</a></p><h3>Faculty</h3><h4>Chair</h4><p>Yair Amir<br />Professor: distributed systems, resilient clouds and critical infrastructure, overlay networks, distributed algorithms.</p><h4>Professor Emeritus</h4><p>Gerald M. Masson<br />Fault tolerant computing, systems diagnosis theory, distributed computing, real-time error monitoring of hardware/software, software design for testability, interconnection networks.</p><h4>Professors</h4><p>Randal Burns<br />Storage systems, high performance and scientific computing, and database federations.</p><p>Jason M. Eisner<br />Computational linguistics (syntax and phonology), natural language processing, statistical machine learning, programming language design.</p><p>Gregory D. Hager<br />Mandell Bellmore Professor; Director, Malone Center for Engineering in Healthcare: vision, robotics, human-machine systems, computer-integrated medicine.</p><p>Philipp Koehn<br />Statistical machine translation.</p><p>S. Rao Kosaraju<br />Edward J. Schaefer Professor in Engineering: design of algorithms, pattern matching, and derandomization.</p><p>Aviel Rubin<br />Technical Director, Information Security Institute: system and networking security, computer privacy, applied cryptography.</p><p>Steven Salzberg<br />Bloomberg Distinguished Professor: genomics, bioinformatics, genome assembly, gene finding, sequence analysis algorithms.</p><p>Scott F. Smith<br />Programming languages, type systems, security in language design, component programming languages.</p><p>Alexander Szalay<br />Bloomberg Distinguished Professor: data intensive computing, theoretical astrophysics, galaxy formation.</p><p>Russell H. Taylor<br />John C. Malone Professor; Director, LCSR &amp; CISST ERC: medical robotics, computer-integrated interventional medicine, medical image analysis, human-machine robotic systems.</p><p>David Yarowsky<br />Natural language and speech processing, information retrieval, machine translation, and machine learning.</p><p>Alan Yuille<br />Bloomberg Distinguished Professor: computational models of vision, mathematical models of cognition, artificial intelligence, neural networks.</p><h4>Associate Professors</h4><p>Michael Kazhdan<br />Computer graphics, surface reconstruction, image and geometry processing.</p><p>Michael Schatz<br />Bloomberg Distinguished Associate Professor: novel algorithms for comparative genomics, human genetics, and personalized medicine.</p><h4>Assistant Professors</h4><p>Yanif Ahmad<br />Data management, stream processing, declarative languages, parallel and distributed databases.</p><p>Raman Arora<br />Machine learning, statistical signal processing, stochastic approximation algorithms, applications to speech and language processing.</p><p>Alexis Battle<br />Genetics of complex traits, graphical models, transfer learning, structured regularization methods.</p><p>Vladimir Braverman<br />Algorithms, massive data sets, data streams, and database systems.</p><p>Michael Dinitz<br />Theoretical computer science, approximation algorithms, applications to networks and distributed computing.</p><p>Matthew Green<br />Applied cryptography, cryptographic protocol design, analysis of practical security systems, privacy-preserving storage and identification technologies.</p><p>Abhishek Jain<br />Cryptography, security, theoretical computer science.</p><p>Benjamin Langmead<br />Computational genomics, sequence alignment, text indexing, parallel and high performance computing.</p><p>Xin Li<br />Theory of computation, randomness, complexity theory, distributed computing, cryptography.</p><p>Suchi Saria<br />Machine learning, computational medicine, health informatics, and applications of machine learning in natural language processing, activity recognition and human-machine systems.</p><p>Ilya Shpitser<br />John C. Malone Assistant Professor: causal inference and missing data, graphical models, longitudinal data analysis in medicine and epidemiology.</p><p>Benjamin Van Durme<br />Artificial intelligence, natural language processing (computational semantics), and streaming algorithms.</p><h4>Research Professors</h4><p>Amihood Amir<br />Algorithms design and analysis, multidimensional pattern matching, knowledge discovery algorithms, real time systems algorithms, computational molecular biology.</p><p>Peter Kazanzides<br />Medical robots, computer-assisted surgery, real-time systems.</p><p>Nassir Navab<br />Augmented reality, vision, medical image computing and computer assisted interventions.</p><h4>Associate Research Professors</h4><p>Philippe Burlina<br />Computer vision, visual analysis and communications, multi-modality image exploitation, enterprise software systems for content and e-process management.</p><p>Chris Callison-Burch<br />Statistical natural language processing, machine translation, paraphrasing, evaluation of human language technologies.</p><p>Susan Hohenberger-Waters<br />Cryptography, computer security, algorithms, and complexity theory.</p><p>James Mayfield<br />Information retrieval, cross-language retrieval, information extraction, natural language processing.</p><p>Andreas Terzis<br />P2P, overlay and sensor networks, resilient internet infrastructure, NP-based architectures.</p><p>Qinqing Zhang<br />Wireless communications and networking, Mobile Ad-hoc networks, cellular system and network technologies, multimedia applications and QoS, Internet protocol and algorithm design, performance analysis.</p><h4>Assistant Research Professors</h4><p>Mark Dredze<br />Machine learning, natural language processing, health informatics.</p><p>Kevin Duh<br />Natural language processing, machine learning.</p><p>Peng Huang<br />Computer systems, software engineering, programming languages.</p><p>Xin Jin<br />Networked systems, cloud computing, networking.</p><p>Simon Leonard<br />Visual servoing, hand-eye coordination.</p><p>Christine Piatko<br />Computational geometry, information visualization, information retrieval.</p><p>Austin Reiter<br />Application of computer vision to robotics, machine vision, 3D reconstruction, image registration, visual recognition.</p><p>I-Jeng Wang<br />Wireless networking, Bayesian networks, probabilistic models.</p><h4>Associate Teaching Professors</h4><p>Sara Miner More<br />Foundations of computing, computer science education, cryptography, information flow.</p><p>Joanne Selinski<br />Director of Undergraduate Studies: CS education, software engineering.</p><h4>Senior Lecturer</h4><p>Peter Fröhlich<br />Programming languages, software engineering, systems software, video game design, web applications.</p><h4>Part-time Lecturers</h4><p>Sheela Kosaraju<br />Computer ethics.</p><p>Harold Lehmann<br />Medical informatics.</p><h4>Visiting Professor</h4><p>Mitra Basu<br />Computational biology, pattern recognition, neural networks, artificial intelligence.</p><h4>Associate Research Scientist</h4><p>Anton Dahbura<br />Executive Director, Information Security Institute: Information security, fault-tolerant computing, distributed systems, testing.</p><h4>Assistant Research Scientist</h4><p>Matt Post<br />Machine translation, syntax, parsing and language modeling.</p><h4>Adjunct Professors</h4><p>Gabor Fichtinger<br />Applied surgical robotics, surgical CAD/CAM systems, percutaneous therapies, stereotactic radiosurgery.</p><p>Peter Freeman<br />Future internet, history and future of computing, innovation and science policy.</p><p>John W. Sheppard<br />Artificial intelligence, machine learning, data mining.</p><h4>Adjunct Assistant Professor</h4><p>Han Liu<br />Statistical machine learning, high dimensional nonparametric learning and massive-data analysis, multiple hypotheses testing, time series analysis, genomics, proteomics, cognitive neuroscience.</p><h4>Adjunct Associate Research Professors</h4><p>Seth Nielson<br />Network security.</p><p>Lanier Watkins<br />Critical infrastructure security, network security.</p><h4>Joint Appointments</h4><p>Joel Bader<br />Associate Professor (Biomedical Engineering): bioinformatics and computational biology. </p><p>Emad Boctor<br />Assistant Professor (Radiology-Medical Imaging Physics): image-guided intervention, ultrasound imaging, elasticity, and thermal imaging.</p><p>Tamas Budavari<br />Assistant Professor (Applied Mathematics and Statistics): computational statistics, bayesian inference, low-dimensional embeddings, streaming and randomized algorithms.</p><p>Gregory Chirikjian<br />Professor (Mechanical Engineering): robotics, kinematics, dynamics, control, motion planning.</p><p>Noah Cowan<br />Associate Professor (Mechanical Engineering): sensor-based control of locomotion and manipulation, and biologically inspired robotics.</p><p>Ralph Etienne-Cummings<br />Professor (Electrical and Computer Engineering): mixed-signal VLSI, computational sensors, robotics, neuromorphic engineering.</p><p>James Fill<br />Professor (Applied Mathematics and Statistics): probability, stochastic processes, random structures, and algorithms.</p><p>Liliana Florea<br />Assistant Professor (McKusick-Nathans Institute for Genetic Medicine): application of computation techniques towards modeling and solving problems in biology and genetic medicine.</p><p>Rachel Karchin<br />Associate Professor (Biomedical Engineering): computational molecular biology, bioinformatics, genetic variation.</p><p>Sanjeev Khudanpur<br />Associate Professor (Electrical and Computer Engineering): information theory, statistical language modeling for speech recognition and machine translation</p><p>Marin Kobilarov<br />Assistant Professor (Mechanical Engineering): intelligent robotic vehicles, analytical and computational methods for mechanics, control, motion planning, and reasoning under uncertainty.</p><p>Michael I Miller<br />Professor (Biomedical Engineering): image understanding, computer vision, medical imaging, computational anatomy.</p><p>Mihaela Pertea<br />Assistant Professor (Medicine): computational tools for RNA-seq analysis, gene finding, splice site prediction, sequence motif finding.</p><p>Carey Priebe<br />Professor (Applied Mathematics and Statistics): computational statistics, kernel and mixture estimates, statistical pattern recognition, and statistical image analysis.</p><p>Jerry L. Prince<br />William B. Kouwenhoven Professor (Electrical and Computer Engineering) (Associate Director for Research, CISST ERC): image processing, computer vision, medical imaging.</p><p>Rebecca Schulman<br />Assistant Professor (Chemical and Biomolecular Engineering): molecular programming, DNA nanotechnology, self-assembly (theory and experiment), theoretical and systems biology, smart materials, nanoscale robotics.</p><p>Ralph Semmel<br />Professor (Director, APL): artificial intelligence, database systems, software engineering.</p><p>Jeff Siewerdsen<br />Professor (Biomedical Engineering): imaging physics, diagnostic radiology, image-guided interventions.</p><p>James Taylor<br />Associate Professor (Biology): genome informatics.</p><p>Rene Vidal<br />Professor (Biomedical Engineering): computer vision, machine learning, robotics, and control.</p><p>Joshua T. Vogelstein<br />Assistant Professor (Biomedical Engineering): big data science, connectomics, statistical neuroscience.</p><p>Louis Whitcomb<br />Professor (Mechanical Engineering): dynamics and control of mechanical systems.</p><p>Raimond L. Winslow<br />Professor (Biomedical Engineering): modeling of biological systems, nonlinear systems theory, grid computing and data management, biomedical ontologies.</p><p>Thomas B. Woolf<br />Professor (Physiology): bioinformatics, computational biophysics.</p></div>
		</div> <!-- end #content -->
	</div> <!-- right-col -->
</div> <!-- content-wrapper -->

<div id="footer" role="contentinfo">
	<div class="wrap clearfix">
		<div class="footer-block">
			<a href="https://jhu.edu" class="footer-logo">
				<img src="/images/logo.png" alt="Johns Hopkins University" />
			</a>
		</div>

		<ul id="menu-footer" class="footer__menu">
			<li id="menu-item-73" class="menu-column menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-73">
				<a>Column One</a>
				<ul class="sub-menu">
					<li id="menu-item-74" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-74"><a>Administrative Contacts</a>
					<ul class="sub-menu">
						<li id="menu-item-75" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-75"><a href="http://studentaffairs.jhu.edu/viceprovost/">Vice Provost For Student Affairs</a></li>
						<li id="menu-item-180" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-180"><a href="http://studentaffairs.jhu.edu/viceprovost/">Dean of Academic and Student Services</a></li>
						<li id="menu-item-179" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-179"><a href="http://web.jhu.edu/studentlife/">Associate Vice Provost/Dean of Student Life</a></li>
					</ul>
				</li>
					<li id="menu-item-183" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-183"><a>Admissions</a>
					<ul class="sub-menu">
						<li id="menu-item-184" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-184"><a href="http://apply.jhu.edu/">Undergraduate</a></li>
						<li id="menu-item-185" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-185"><a href="https://www.jhu.edu/admissions/graduate-admissions/">Graduate</a></li>
					</ul>
				</li>
				</ul>
			</li>

			<li id="menu-item-76" class="menu-column menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-76"><a>Column Two</a>
				<ul class="sub-menu">
					<li id="menu-item-77" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-77"><a>Other Student Life Sites</a>
						<ul class="sub-menu">
							<li id="menu-item-78" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-78"><a href="http://www.hopkinsmedicine.org/som/students/life/index.html">School of Medicine</a></li>
							<li id="menu-item-186" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-186"><a href="http://carey.jhu.edu/students/">Carey Business School</a></li>
							<li id="menu-item-187" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-187"><a href="http://www.son.jhmi.edu/life_at_hopkins/student_resources/">School of Nursing</a></li>
							<li id="menu-item-188" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-188"><a href="http://www.jhsph.edu/student_affairs/">Bloomberg School of Public Health</a></li>
							<li id="menu-item-189" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-189"><a href="http://www.sais-jhu.edu/">School of Advanced International Studies</a></li>
							<li id="menu-item-190" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-190"><a href="http://www.peabody.jhu.edu/conservatory/studentaffairs/">Peabody Conservatory</a></li>
							<li id="menu-item-191" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-191"><a href="http://education.jhu.edu/">School of Education</a></li>
						</ul>
					</li>
				</ul>
			</li>

			<li id="menu-item-80" class="menu-column menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-80">
				<a>Column Three</a>
				<ul class="sub-menu">
					<li id="menu-item-98" class="menu-hidden menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-98">
						<a>Hidden Heading</a>
						<ul class="sub-menu">
							<li id="menu-item-181" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-181"><a href="http://hub.jhu.edu/events">Events Calendar</a></li>
							<li id="menu-item-195" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-195"><a href="http://hub.jhu.edu/submit-event">Promote an Event</a></li>
							<li id="menu-item-81" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-81"><a href="https://www.jhu.edu/maps-directions/">Maps</a></li>
						</ul>
					</li>
					<li id="menu-item-198" class="menu-hidden menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-198">
						<a>Hidden Placeholder</a>
						<ul class="sub-menu">
							<li id="menu-item-194" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-194"><a href="https://www.jhu.edu/university-policies/">Policies</a></li>
							<li id="menu-item-490" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-490"><a href="http://sexualassault.jhu.edu/">Title IX Information and Resources</a></li>
							<li id="menu-item-196" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-196"><a href="http://web.jhu.edu/administration/provost/programs_services/student_right_to_know">Consumer Information</a></li>
						</ul>
					</li>
				</ul>
			</li>
		</ul>

		<div class="footer-block" id="copyright">
			<p>© Johns Hopkins University<br>Baltimore, Maryland 410-516-8000<br>All rights reserved</p>
		</div>

	</div>
</div><!-- end #footer -->

<a href="#header" id="totop">Back to Top</a>

<div id="print-dialog" class="screen noscript" role="dialog">
	<div class="print-header">
		Print Options
	</div>
	<div class="print-body">
		<div class="print-option">
			<div class="option-head">
				<a href="#" onclick="hidePrintDialog();window.print();return false;">Send Page to Printer</a>
			</div>
			<p>
				<em>Print this page.</em>
			</p>
		</div>


<div class="print-option"><div class="option-head"><a href="computer-science.pdf" target="_blank">Download PDF of this page</a></div><p><em>The PDF will include all information unique to this page.</em></p></div>

	</div>
	<div class="buttons clearfix">
		<div class="cancel">
			<a href="#" onclick="hidePrintDialog(); return false;">Cancel</a>
		</div>
	</div>
</div>

</body>
</html>
